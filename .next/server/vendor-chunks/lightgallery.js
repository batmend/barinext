"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lightgallery";
exports.ids = ["vendor-chunks/lightgallery"];
exports.modules = {

/***/ "(ssr)/./node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.es5.js":
/*!*************************************************************************!*\
  !*** ./node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.es5.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * lightgallery | 2.8.3 | March 1st 2025\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar thumbnailsSettings = {\r\n    thumbnail: true,\r\n    animateThumb: true,\r\n    currentPagerPosition: 'middle',\r\n    alignThumbnails: 'middle',\r\n    thumbWidth: 100,\r\n    thumbHeight: '80px',\r\n    thumbMargin: 5,\r\n    appendThumbnailsTo: '.lg-components',\r\n    toggleThumb: false,\r\n    enableThumbDrag: true,\r\n    enableThumbSwipe: true,\r\n    thumbnailSwipeThreshold: 10,\r\n    loadYouTubeThumbnail: true,\r\n    youTubeThumbSize: 1,\r\n    thumbnailPluginStrings: {\r\n        toggleThumbnails: 'Toggle thumbnails',\r\n    },\r\n};\n\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */\r\nvar lGEvents = {\r\n    afterAppendSlide: 'lgAfterAppendSlide',\r\n    init: 'lgInit',\r\n    hasVideo: 'lgHasVideo',\r\n    containerResize: 'lgContainerResize',\r\n    updateSlides: 'lgUpdateSlides',\r\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\r\n    beforeOpen: 'lgBeforeOpen',\r\n    afterOpen: 'lgAfterOpen',\r\n    slideItemLoad: 'lgSlideItemLoad',\r\n    beforeSlide: 'lgBeforeSlide',\r\n    afterSlide: 'lgAfterSlide',\r\n    posterClick: 'lgPosterClick',\r\n    dragStart: 'lgDragStart',\r\n    dragMove: 'lgDragMove',\r\n    dragEnd: 'lgDragEnd',\r\n    beforeNextSlide: 'lgBeforeNextSlide',\r\n    beforePrevSlide: 'lgBeforePrevSlide',\r\n    beforeClose: 'lgBeforeClose',\r\n    afterClose: 'lgAfterClose',\r\n    rotateLeft: 'lgRotateLeft',\r\n    rotateRight: 'lgRotateRight',\r\n    flipHorizontal: 'lgFlipHorizontal',\r\n    flipVertical: 'lgFlipVertical',\r\n    autoplay: 'lgAutoplay',\r\n    autoplayStart: 'lgAutoplayStart',\r\n    autoplayStop: 'lgAutoplayStop',\r\n};\n\nvar Thumbnail = /** @class */ (function () {\r\n    function Thumbnail(instance, $LG) {\r\n        this.thumbOuterWidth = 0;\r\n        this.thumbTotalWidth = 0;\r\n        this.translateX = 0;\r\n        this.thumbClickable = false;\r\n        // get lightGallery core plugin instance\r\n        this.core = instance;\r\n        this.$LG = $LG;\r\n        return this;\r\n    }\r\n    Thumbnail.prototype.init = function () {\r\n        // extend module default settings with lightGallery core settings\r\n        this.settings = __assign(__assign({}, thumbnailsSettings), this.core.settings);\r\n        this.thumbOuterWidth = 0;\r\n        this.thumbTotalWidth =\r\n            this.core.galleryItems.length *\r\n                (this.settings.thumbWidth + this.settings.thumbMargin);\r\n        // Thumbnail animation value\r\n        this.translateX = 0;\r\n        this.setAnimateThumbStyles();\r\n        if (!this.core.settings.allowMediaOverlap) {\r\n            this.settings.toggleThumb = false;\r\n        }\r\n        if (this.settings.thumbnail) {\r\n            this.build();\r\n            if (this.settings.animateThumb) {\r\n                if (this.settings.enableThumbDrag) {\r\n                    this.enableThumbDrag();\r\n                }\r\n                if (this.settings.enableThumbSwipe) {\r\n                    this.enableThumbSwipe();\r\n                }\r\n                this.thumbClickable = false;\r\n            }\r\n            else {\r\n                this.thumbClickable = true;\r\n            }\r\n            this.toggleThumbBar();\r\n            this.thumbKeyPress();\r\n        }\r\n    };\r\n    Thumbnail.prototype.build = function () {\r\n        var _this = this;\r\n        this.setThumbMarkup();\r\n        this.manageActiveClassOnSlideChange();\r\n        this.$lgThumb.first().on('click.lg touchend.lg', function (e) {\r\n            var $target = _this.$LG(e.target);\r\n            if (!$target.hasAttribute('data-lg-item-id')) {\r\n                return;\r\n            }\r\n            setTimeout(function () {\r\n                // In IE9 and bellow touch does not support\r\n                // Go to slide if browser does not support css transitions\r\n                if (_this.thumbClickable && !_this.core.lgBusy) {\r\n                    var index = parseInt($target.attr('data-lg-item-id'));\r\n                    _this.core.slide(index, false, true, false);\r\n                }\r\n            }, 50);\r\n        });\r\n        this.core.LGel.on(lGEvents.beforeSlide + \".thumb\", function (event) {\r\n            var index = event.detail.index;\r\n            _this.animateThumb(index);\r\n        });\r\n        this.core.LGel.on(lGEvents.beforeOpen + \".thumb\", function () {\r\n            _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\r\n        });\r\n        this.core.LGel.on(lGEvents.updateSlides + \".thumb\", function () {\r\n            _this.rebuildThumbnails();\r\n        });\r\n        this.core.LGel.on(lGEvents.containerResize + \".thumb\", function () {\r\n            if (!_this.core.lgOpened)\r\n                return;\r\n            setTimeout(function () {\r\n                _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\r\n                _this.animateThumb(_this.core.index);\r\n                _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\r\n            }, 50);\r\n        });\r\n    };\r\n    Thumbnail.prototype.setThumbMarkup = function () {\r\n        var thumbOuterClassNames = 'lg-thumb-outer ';\r\n        if (this.settings.alignThumbnails) {\r\n            thumbOuterClassNames += \"lg-thumb-align-\" + this.settings.alignThumbnails;\r\n        }\r\n        var html = \"<div class=\\\"\" + thumbOuterClassNames + \"\\\">\\n        <div class=\\\"lg-thumb lg-group\\\">\\n        </div>\\n        </div>\";\r\n        this.core.outer.addClass('lg-has-thumb');\r\n        if (this.settings.appendThumbnailsTo === '.lg-components') {\r\n            this.core.$lgComponents.append(html);\r\n        }\r\n        else {\r\n            this.core.outer.append(html);\r\n        }\r\n        this.$thumbOuter = this.core.outer.find('.lg-thumb-outer').first();\r\n        this.$lgThumb = this.core.outer.find('.lg-thumb').first();\r\n        if (this.settings.animateThumb) {\r\n            this.core.outer\r\n                .find('.lg-thumb')\r\n                .css('transition-duration', this.core.settings.speed + 'ms')\r\n                .css('width', this.thumbTotalWidth + 'px')\r\n                .css('position', 'relative');\r\n        }\r\n        this.setThumbItemHtml(this.core.galleryItems);\r\n    };\r\n    Thumbnail.prototype.enableThumbDrag = function () {\r\n        var _this = this;\r\n        var thumbDragUtils = {\r\n            cords: {\r\n                startX: 0,\r\n                endX: 0,\r\n            },\r\n            isMoved: false,\r\n            newTranslateX: 0,\r\n            startTime: new Date(),\r\n            endTime: new Date(),\r\n            touchMoveTime: 0,\r\n        };\r\n        var isDragging = false;\r\n        this.$thumbOuter.addClass('lg-grab');\r\n        this.core.outer\r\n            .find('.lg-thumb')\r\n            .first()\r\n            .on('mousedown.lg.thumb', function (e) {\r\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\r\n                // execute only on .lg-object\r\n                e.preventDefault();\r\n                thumbDragUtils.cords.startX = e.pageX;\r\n                thumbDragUtils.startTime = new Date();\r\n                _this.thumbClickable = false;\r\n                isDragging = true;\r\n                // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\r\n                _this.core.outer.get().scrollLeft += 1;\r\n                _this.core.outer.get().scrollLeft -= 1;\r\n                // *\r\n                _this.$thumbOuter\r\n                    .removeClass('lg-grab')\r\n                    .addClass('lg-grabbing');\r\n            }\r\n        });\r\n        this.$LG(window).on(\"mousemove.lg.thumb.global\" + this.core.lgId, function (e) {\r\n            if (!_this.core.lgOpened)\r\n                return;\r\n            if (isDragging) {\r\n                thumbDragUtils.cords.endX = e.pageX;\r\n                thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);\r\n            }\r\n        });\r\n        this.$LG(window).on(\"mouseup.lg.thumb.global\" + this.core.lgId, function () {\r\n            if (!_this.core.lgOpened)\r\n                return;\r\n            if (thumbDragUtils.isMoved) {\r\n                thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);\r\n            }\r\n            else {\r\n                _this.thumbClickable = true;\r\n            }\r\n            if (isDragging) {\r\n                isDragging = false;\r\n                _this.$thumbOuter.removeClass('lg-grabbing').addClass('lg-grab');\r\n            }\r\n        });\r\n    };\r\n    Thumbnail.prototype.enableThumbSwipe = function () {\r\n        var _this = this;\r\n        var thumbDragUtils = {\r\n            cords: {\r\n                startX: 0,\r\n                endX: 0,\r\n            },\r\n            isMoved: false,\r\n            newTranslateX: 0,\r\n            startTime: new Date(),\r\n            endTime: new Date(),\r\n            touchMoveTime: 0,\r\n        };\r\n        this.$lgThumb.on('touchstart.lg', function (e) {\r\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\r\n                e.preventDefault();\r\n                thumbDragUtils.cords.startX = e.targetTouches[0].pageX;\r\n                _this.thumbClickable = false;\r\n                thumbDragUtils.startTime = new Date();\r\n            }\r\n        });\r\n        this.$lgThumb.on('touchmove.lg', function (e) {\r\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\r\n                e.preventDefault();\r\n                thumbDragUtils.cords.endX = e.targetTouches[0].pageX;\r\n                thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);\r\n            }\r\n        });\r\n        this.$lgThumb.on('touchend.lg', function () {\r\n            if (thumbDragUtils.isMoved) {\r\n                thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);\r\n            }\r\n            else {\r\n                _this.thumbClickable = true;\r\n            }\r\n        });\r\n    };\r\n    // Rebuild thumbnails\r\n    Thumbnail.prototype.rebuildThumbnails = function () {\r\n        var _this = this;\r\n        // Remove transitions\r\n        this.$thumbOuter.addClass('lg-rebuilding-thumbnails');\r\n        setTimeout(function () {\r\n            _this.thumbTotalWidth =\r\n                _this.core.galleryItems.length *\r\n                    (_this.settings.thumbWidth + _this.settings.thumbMargin);\r\n            _this.$lgThumb.css('width', _this.thumbTotalWidth + 'px');\r\n            _this.$lgThumb.empty();\r\n            _this.setThumbItemHtml(_this.core.galleryItems);\r\n            _this.animateThumb(_this.core.index);\r\n        }, 50);\r\n        setTimeout(function () {\r\n            _this.$thumbOuter.removeClass('lg-rebuilding-thumbnails');\r\n        }, 200);\r\n    };\r\n    // @ts-check\r\n    Thumbnail.prototype.setTranslate = function (value) {\r\n        this.$lgThumb.css('transform', 'translate3d(-' + value + 'px, 0px, 0px)');\r\n    };\r\n    Thumbnail.prototype.getPossibleTransformX = function (left) {\r\n        if (left > this.thumbTotalWidth - this.thumbOuterWidth) {\r\n            left = this.thumbTotalWidth - this.thumbOuterWidth;\r\n        }\r\n        if (left < 0) {\r\n            left = 0;\r\n        }\r\n        return left;\r\n    };\r\n    Thumbnail.prototype.animateThumb = function (index) {\r\n        this.$lgThumb.css('transition-duration', this.core.settings.speed + 'ms');\r\n        if (this.settings.animateThumb) {\r\n            var position = 0;\r\n            switch (this.settings.currentPagerPosition) {\r\n                case 'left':\r\n                    position = 0;\r\n                    break;\r\n                case 'middle':\r\n                    position =\r\n                        this.thumbOuterWidth / 2 - this.settings.thumbWidth / 2;\r\n                    break;\r\n                case 'right':\r\n                    position = this.thumbOuterWidth - this.settings.thumbWidth;\r\n            }\r\n            this.translateX =\r\n                (this.settings.thumbWidth + this.settings.thumbMargin) * index -\r\n                    1 -\r\n                    position;\r\n            if (this.translateX > this.thumbTotalWidth - this.thumbOuterWidth) {\r\n                this.translateX = this.thumbTotalWidth - this.thumbOuterWidth;\r\n            }\r\n            if (this.translateX < 0) {\r\n                this.translateX = 0;\r\n            }\r\n            this.setTranslate(this.translateX);\r\n        }\r\n    };\r\n    Thumbnail.prototype.onThumbTouchMove = function (thumbDragUtils) {\r\n        thumbDragUtils.newTranslateX = this.translateX;\r\n        thumbDragUtils.isMoved = true;\r\n        thumbDragUtils.touchMoveTime = new Date().valueOf();\r\n        thumbDragUtils.newTranslateX -=\r\n            thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\r\n        thumbDragUtils.newTranslateX = this.getPossibleTransformX(thumbDragUtils.newTranslateX);\r\n        // move current slide\r\n        this.setTranslate(thumbDragUtils.newTranslateX);\r\n        this.$thumbOuter.addClass('lg-dragging');\r\n        return thumbDragUtils;\r\n    };\r\n    Thumbnail.prototype.onThumbTouchEnd = function (thumbDragUtils) {\r\n        thumbDragUtils.isMoved = false;\r\n        thumbDragUtils.endTime = new Date();\r\n        this.$thumbOuter.removeClass('lg-dragging');\r\n        var touchDuration = thumbDragUtils.endTime.valueOf() -\r\n            thumbDragUtils.startTime.valueOf();\r\n        var distanceXnew = thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\r\n        var speedX = Math.abs(distanceXnew) / touchDuration;\r\n        // Some magical numbers\r\n        // Can be improved\r\n        if (speedX > 0.15 &&\r\n            thumbDragUtils.endTime.valueOf() - thumbDragUtils.touchMoveTime < 30) {\r\n            speedX += 1;\r\n            if (speedX > 2) {\r\n                speedX += 1;\r\n            }\r\n            speedX =\r\n                speedX +\r\n                    speedX * (Math.abs(distanceXnew) / this.thumbOuterWidth);\r\n            this.$lgThumb.css('transition-duration', Math.min(speedX - 1, 2) + 'settings');\r\n            distanceXnew = distanceXnew * speedX;\r\n            this.translateX = this.getPossibleTransformX(this.translateX - distanceXnew);\r\n            this.setTranslate(this.translateX);\r\n        }\r\n        else {\r\n            this.translateX = thumbDragUtils.newTranslateX;\r\n        }\r\n        if (Math.abs(thumbDragUtils.cords.endX - thumbDragUtils.cords.startX) <\r\n            this.settings.thumbnailSwipeThreshold) {\r\n            this.thumbClickable = true;\r\n        }\r\n        return thumbDragUtils;\r\n    };\r\n    Thumbnail.prototype.getThumbHtml = function (thumb, index, alt) {\r\n        var slideVideoInfo = this.core.galleryItems[index].__slideVideoInfo || {};\r\n        var thumbImg;\r\n        if (slideVideoInfo.youtube) {\r\n            if (this.settings.loadYouTubeThumbnail) {\r\n                thumbImg =\r\n                    '//img.youtube.com/vi/' +\r\n                        slideVideoInfo.youtube[1] +\r\n                        '/' +\r\n                        this.settings.youTubeThumbSize +\r\n                        '.jpg';\r\n            }\r\n            else {\r\n                thumbImg = thumb;\r\n            }\r\n        }\r\n        else {\r\n            thumbImg = thumb;\r\n        }\r\n        var div = document.createElement('div');\r\n        div.setAttribute('data-lg-item-id', index + '');\r\n        div.className = \"lg-thumb-item \" + (index === this.core.index ? 'active' : '');\r\n        div.style.cssText = \"width: \" + this.settings.thumbWidth + \"px; height: \" + this.settings.thumbHeight + \"; margin-right: \" + this.settings.thumbMargin + \"px;\";\r\n        var img = document.createElement('img');\r\n        img.alt = alt || '';\r\n        img.setAttribute('data-lg-item-id', index + '');\r\n        img.src = thumbImg;\r\n        div.appendChild(img);\r\n        return div;\r\n    };\r\n    Thumbnail.prototype.setThumbItemHtml = function (items) {\r\n        for (var i = 0; i < items.length; i++) {\r\n            var thumb = this.getThumbHtml(items[i].thumb, i, items[i].alt);\r\n            this.$lgThumb.append(thumb);\r\n        }\r\n    };\r\n    Thumbnail.prototype.setAnimateThumbStyles = function () {\r\n        if (this.settings.animateThumb) {\r\n            this.core.outer.addClass('lg-animate-thumb');\r\n        }\r\n    };\r\n    // Manage thumbnail active calss\r\n    Thumbnail.prototype.manageActiveClassOnSlideChange = function () {\r\n        var _this = this;\r\n        // manage active class for thumbnail\r\n        this.core.LGel.on(lGEvents.beforeSlide + \".thumb\", function (event) {\r\n            var $thumb = _this.core.outer.find('.lg-thumb-item');\r\n            var index = event.detail.index;\r\n            $thumb.removeClass('active');\r\n            $thumb.eq(index).addClass('active');\r\n        });\r\n    };\r\n    // Toggle thumbnail bar\r\n    Thumbnail.prototype.toggleThumbBar = function () {\r\n        var _this = this;\r\n        if (this.settings.toggleThumb) {\r\n            this.core.outer.addClass('lg-can-toggle');\r\n            this.core.$toolbar.append('<button type=\"button\" aria-label=\"' +\r\n                this.settings.thumbnailPluginStrings['toggleThumbnails'] +\r\n                '\" class=\"lg-toggle-thumb lg-icon\"></button>');\r\n            this.core.outer\r\n                .find('.lg-toggle-thumb')\r\n                .first()\r\n                .on('click.lg', function () {\r\n                _this.core.outer.toggleClass('lg-components-open');\r\n            });\r\n        }\r\n    };\r\n    Thumbnail.prototype.thumbKeyPress = function () {\r\n        var _this = this;\r\n        this.$LG(window).on(\"keydown.lg.thumb.global\" + this.core.lgId, function (e) {\r\n            if (!_this.core.lgOpened || !_this.settings.toggleThumb)\r\n                return;\r\n            if (e.keyCode === 38) {\r\n                e.preventDefault();\r\n                _this.core.outer.addClass('lg-components-open');\r\n            }\r\n            else if (e.keyCode === 40) {\r\n                e.preventDefault();\r\n                _this.core.outer.removeClass('lg-components-open');\r\n            }\r\n        });\r\n    };\r\n    Thumbnail.prototype.destroy = function () {\r\n        if (this.settings.thumbnail) {\r\n            this.$LG(window).off(\".lg.thumb.global\" + this.core.lgId);\r\n            this.core.LGel.off('.lg.thumb');\r\n            this.core.LGel.off('.thumb');\r\n            this.$thumbOuter.remove();\r\n            this.core.outer.removeClass('lg-has-thumb');\r\n        }\r\n    };\r\n    return Thumbnail;\r\n}());\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Thumbnail);\n//# sourceMappingURL=lg-thumbnail.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js":
/*!***************************************************************!*\
  !*** ./node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * lightgallery | 2.8.3 | March 1st 2025\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar zoomSettings = {\r\n    scale: 1,\r\n    zoom: true,\r\n    infiniteZoom: true,\r\n    actualSize: true,\r\n    showZoomInOutIcons: false,\r\n    actualSizeIcons: {\r\n        zoomIn: 'lg-zoom-in',\r\n        zoomOut: 'lg-zoom-out',\r\n    },\r\n    enableZoomAfter: 300,\r\n    zoomPluginStrings: {\r\n        zoomIn: 'Zoom in',\r\n        zoomOut: 'Zoom out',\r\n        viewActualSize: 'View actual size',\r\n    },\r\n};\n\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */\r\nvar lGEvents = {\r\n    afterAppendSlide: 'lgAfterAppendSlide',\r\n    init: 'lgInit',\r\n    hasVideo: 'lgHasVideo',\r\n    containerResize: 'lgContainerResize',\r\n    updateSlides: 'lgUpdateSlides',\r\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\r\n    beforeOpen: 'lgBeforeOpen',\r\n    afterOpen: 'lgAfterOpen',\r\n    slideItemLoad: 'lgSlideItemLoad',\r\n    beforeSlide: 'lgBeforeSlide',\r\n    afterSlide: 'lgAfterSlide',\r\n    posterClick: 'lgPosterClick',\r\n    dragStart: 'lgDragStart',\r\n    dragMove: 'lgDragMove',\r\n    dragEnd: 'lgDragEnd',\r\n    beforeNextSlide: 'lgBeforeNextSlide',\r\n    beforePrevSlide: 'lgBeforePrevSlide',\r\n    beforeClose: 'lgBeforeClose',\r\n    afterClose: 'lgAfterClose',\r\n    rotateLeft: 'lgRotateLeft',\r\n    rotateRight: 'lgRotateRight',\r\n    flipHorizontal: 'lgFlipHorizontal',\r\n    flipVertical: 'lgFlipVertical',\r\n    autoplay: 'lgAutoplay',\r\n    autoplayStart: 'lgAutoplayStart',\r\n    autoplayStop: 'lgAutoplayStop',\r\n};\n\nvar ZOOM_TRANSITION_DURATION = 500;\r\nvar Zoom = /** @class */ (function () {\r\n    function Zoom(instance, $LG) {\r\n        // get lightGallery core plugin instance\r\n        this.core = instance;\r\n        this.$LG = $LG;\r\n        this.settings = __assign(__assign({}, zoomSettings), this.core.settings);\r\n        return this;\r\n    }\r\n    // Append Zoom controls. Actual size, Zoom-in, Zoom-out\r\n    Zoom.prototype.buildTemplates = function () {\r\n        var zoomIcons = this.settings.showZoomInOutIcons\r\n            ? \"<button id=\\\"\" + this.core.getIdName('lg-zoom-in') + \"\\\" type=\\\"button\\\" aria-label=\\\"\" + this.settings.zoomPluginStrings['zoomIn'] + \"\\\" class=\\\"lg-zoom-in lg-icon\\\"></button><button id=\\\"\" + this.core.getIdName('lg-zoom-out') + \"\\\" type=\\\"button\\\" aria-label=\\\"\" + this.settings.zoomPluginStrings['zoomOut'] + \"\\\" class=\\\"lg-zoom-out lg-icon\\\"></button>\"\r\n            : '';\r\n        if (this.settings.actualSize) {\r\n            zoomIcons += \"<button id=\\\"\" + this.core.getIdName('lg-actual-size') + \"\\\" type=\\\"button\\\" aria-label=\\\"\" + this.settings.zoomPluginStrings['viewActualSize'] + \"\\\" class=\\\"\" + this.settings.actualSizeIcons.zoomIn + \" lg-icon\\\"></button>\";\r\n        }\r\n        this.core.outer.addClass('lg-use-transition-for-zoom');\r\n        this.core.$toolbar.first().append(zoomIcons);\r\n    };\r\n    /**\r\n     * @desc Enable zoom option only once the image is completely loaded\r\n     * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted\r\n     *\r\n     * Zoom styles are defined under lg-zoomable CSS class.\r\n     */\r\n    Zoom.prototype.enableZoom = function (event) {\r\n        var _this = this;\r\n        // delay will be 0 except first time\r\n        var _speed = this.settings.enableZoomAfter + event.detail.delay;\r\n        // set _speed value 0 if gallery opened from direct url and if it is first slide\r\n        if (this.$LG('body').first().hasClass('lg-from-hash') &&\r\n            event.detail.delay) {\r\n            // will execute only once\r\n            _speed = 0;\r\n        }\r\n        else {\r\n            // Remove lg-from-hash to enable starting animation.\r\n            this.$LG('body').first().removeClass('lg-from-hash');\r\n        }\r\n        this.zoomableTimeout = setTimeout(function () {\r\n            if (!_this.isImageSlide(_this.core.index)) {\r\n                return;\r\n            }\r\n            _this.core.getSlideItem(event.detail.index).addClass('lg-zoomable');\r\n            if (event.detail.index === _this.core.index) {\r\n                _this.setZoomEssentials();\r\n            }\r\n        }, _speed + 30);\r\n    };\r\n    Zoom.prototype.enableZoomOnSlideItemLoad = function () {\r\n        // Add zoomable class\r\n        this.core.LGel.on(lGEvents.slideItemLoad + \".zoom\", this.enableZoom.bind(this));\r\n    };\r\n    Zoom.prototype.getDragCords = function (e) {\r\n        return {\r\n            x: e.pageX,\r\n            y: e.pageY,\r\n        };\r\n    };\r\n    Zoom.prototype.getSwipeCords = function (e) {\r\n        var x = e.touches[0].pageX;\r\n        var y = e.touches[0].pageY;\r\n        return {\r\n            x: x,\r\n            y: y,\r\n        };\r\n    };\r\n    Zoom.prototype.getDragAllowedAxises = function (scale, scaleDiff) {\r\n        if (!this.containerRect) {\r\n            return {\r\n                allowX: false,\r\n                allowY: false,\r\n            };\r\n        }\r\n        var $image = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-image')\r\n            .first()\r\n            .get();\r\n        var height = 0;\r\n        var width = 0;\r\n        var rect = $image.getBoundingClientRect();\r\n        if (scale) {\r\n            height = $image.offsetHeight * scale;\r\n            width = $image.offsetWidth * scale;\r\n        }\r\n        else if (scaleDiff) {\r\n            height = rect.height + scaleDiff * rect.height;\r\n            width = rect.width + scaleDiff * rect.width;\r\n        }\r\n        else {\r\n            height = rect.height;\r\n            width = rect.width;\r\n        }\r\n        var allowY = height > this.containerRect.height;\r\n        var allowX = width > this.containerRect.width;\r\n        return {\r\n            allowX: allowX,\r\n            allowY: allowY,\r\n        };\r\n    };\r\n    Zoom.prototype.setZoomEssentials = function () {\r\n        this.containerRect = this.core.$content.get().getBoundingClientRect();\r\n    };\r\n    /**\r\n     * @desc Image zoom\r\n     * Translate the wrap and scale the image to get better user experience\r\n     *\r\n     * @param {String} scale - Zoom decrement/increment value\r\n     */\r\n    Zoom.prototype.zoomImage = function (scale, scaleDiff, reposition, resetToMax) {\r\n        if (Math.abs(scaleDiff) <= 0)\r\n            return;\r\n        var offsetX = this.containerRect.width / 2 + this.containerRect.left;\r\n        var offsetY = this.containerRect.height / 2 +\r\n            this.containerRect.top +\r\n            this.scrollTop;\r\n        var originalX;\r\n        var originalY;\r\n        if (scale === 1) {\r\n            this.positionChanged = false;\r\n        }\r\n        var dragAllowedAxises = this.getDragAllowedAxises(0, scaleDiff);\r\n        var allowY = dragAllowedAxises.allowY, allowX = dragAllowedAxises.allowX;\r\n        if (this.positionChanged) {\r\n            originalX = this.left / (this.scale - scaleDiff);\r\n            originalY = this.top / (this.scale - scaleDiff);\r\n            this.pageX = offsetX - originalX;\r\n            this.pageY = offsetY - originalY;\r\n            this.positionChanged = false;\r\n        }\r\n        var possibleSwipeCords = this.getPossibleSwipeDragCords(scaleDiff);\r\n        var x;\r\n        var y;\r\n        var _x = offsetX - this.pageX;\r\n        var _y = offsetY - this.pageY;\r\n        if (scale - scaleDiff > 1) {\r\n            var scaleVal = (scale - scaleDiff) / Math.abs(scaleDiff);\r\n            _x =\r\n                (scaleDiff < 0 ? -_x : _x) +\r\n                    this.left * (scaleVal + (scaleDiff < 0 ? -1 : 1));\r\n            _y =\r\n                (scaleDiff < 0 ? -_y : _y) +\r\n                    this.top * (scaleVal + (scaleDiff < 0 ? -1 : 1));\r\n            x = _x / scaleVal;\r\n            y = _y / scaleVal;\r\n        }\r\n        else {\r\n            var scaleVal = (scale - scaleDiff) * scaleDiff;\r\n            x = _x * scaleVal;\r\n            y = _y * scaleVal;\r\n        }\r\n        if (reposition) {\r\n            if (allowX) {\r\n                if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {\r\n                    x = possibleSwipeCords.minX;\r\n                }\r\n                else if (this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)) {\r\n                    x = possibleSwipeCords.maxX;\r\n                }\r\n            }\r\n            else {\r\n                if (scale > 1) {\r\n                    if (x < possibleSwipeCords.minX) {\r\n                        x = possibleSwipeCords.minX;\r\n                    }\r\n                    else if (x > possibleSwipeCords.maxX) {\r\n                        x = possibleSwipeCords.maxX;\r\n                    }\r\n                }\r\n            }\r\n            // @todo fix this\r\n            if (allowY) {\r\n                if (this.isBeyondPossibleTop(y, possibleSwipeCords.minY)) {\r\n                    y = possibleSwipeCords.minY;\r\n                }\r\n                else if (this.isBeyondPossibleBottom(y, possibleSwipeCords.maxY)) {\r\n                    y = possibleSwipeCords.maxY;\r\n                }\r\n            }\r\n            else {\r\n                // If the translate value based on index of beyond the viewport, utilize the available space to prevent image being cut out\r\n                if (scale > 1) {\r\n                    //If image goes beyond viewport top, use the minim possible translate value\r\n                    if (y < possibleSwipeCords.minY) {\r\n                        y = possibleSwipeCords.minY;\r\n                    }\r\n                    else if (y > possibleSwipeCords.maxY) {\r\n                        y = possibleSwipeCords.maxY;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.setZoomStyles({\r\n            x: x,\r\n            y: y,\r\n            scale: scale,\r\n        });\r\n        this.left = x;\r\n        this.top = y;\r\n        if (resetToMax) {\r\n            this.setZoomImageSize();\r\n        }\r\n    };\r\n    Zoom.prototype.resetImageTranslate = function (index) {\r\n        if (!this.isImageSlide(index)) {\r\n            return;\r\n        }\r\n        var $image = this.core.getSlideItem(index).find('.lg-image').first();\r\n        this.imageReset = false;\r\n        $image.removeClass('reset-transition reset-transition-y reset-transition-x');\r\n        this.core.outer.removeClass('lg-actual-size');\r\n        $image.css('width', 'auto').css('height', 'auto');\r\n        setTimeout(function () {\r\n            $image.removeClass('no-transition');\r\n        }, 10);\r\n    };\r\n    Zoom.prototype.setZoomImageSize = function () {\r\n        var _this = this;\r\n        var $image = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-image')\r\n            .first();\r\n        setTimeout(function () {\r\n            var actualSizeScale = _this.getCurrentImageActualSizeScale();\r\n            if (_this.scale >= actualSizeScale) {\r\n                $image.addClass('no-transition');\r\n                _this.imageReset = true;\r\n            }\r\n        }, ZOOM_TRANSITION_DURATION);\r\n        setTimeout(function () {\r\n            var actualSizeScale = _this.getCurrentImageActualSizeScale();\r\n            if (_this.scale >= actualSizeScale) {\r\n                var dragAllowedAxises = _this.getDragAllowedAxises(_this.scale);\r\n                $image\r\n                    .css('width', $image.get().naturalWidth + 'px')\r\n                    .css('height', $image.get().naturalHeight + 'px');\r\n                _this.core.outer.addClass('lg-actual-size');\r\n                if (dragAllowedAxises.allowX && dragAllowedAxises.allowY) {\r\n                    $image.addClass('reset-transition');\r\n                }\r\n                else if (dragAllowedAxises.allowX &&\r\n                    !dragAllowedAxises.allowY) {\r\n                    $image.addClass('reset-transition-x');\r\n                }\r\n                else if (!dragAllowedAxises.allowX &&\r\n                    dragAllowedAxises.allowY) {\r\n                    $image.addClass('reset-transition-y');\r\n                }\r\n            }\r\n        }, ZOOM_TRANSITION_DURATION + 50);\r\n    };\r\n    /**\r\n     * @desc apply scale3d to image and translate to image wrap\r\n     * @param {style} X,Y and scale\r\n     */\r\n    Zoom.prototype.setZoomStyles = function (style) {\r\n        var $imageWrap = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-img-wrap')\r\n            .first();\r\n        var $image = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-image')\r\n            .first();\r\n        var $dummyImage = this.core.outer\r\n            .find('.lg-current .lg-dummy-img')\r\n            .first();\r\n        this.scale = style.scale;\r\n        $image.css('transform', 'scale3d(' + style.scale + ', ' + style.scale + ', 1)');\r\n        $dummyImage.css('transform', 'scale3d(' + style.scale + ', ' + style.scale + ', 1)');\r\n        var transform = 'translate3d(' + style.x + 'px, ' + style.y + 'px, 0)';\r\n        $imageWrap.css('transform', transform);\r\n    };\r\n    /**\r\n     * @param index - Index of the current slide\r\n     * @param event - event will be available only if the function is called on clicking/taping the imags\r\n     */\r\n    Zoom.prototype.setActualSize = function (index, event) {\r\n        var _this = this;\r\n        if (this.zoomInProgress) {\r\n            return;\r\n        }\r\n        this.zoomInProgress = true;\r\n        var currentItem = this.core.galleryItems[this.core.index];\r\n        this.resetImageTranslate(index);\r\n        setTimeout(function () {\r\n            // Allow zoom only on image\r\n            if (!currentItem.src ||\r\n                _this.core.outer.hasClass('lg-first-slide-loading')) {\r\n                return;\r\n            }\r\n            var scale = _this.getCurrentImageActualSizeScale();\r\n            var prevScale = _this.scale;\r\n            if (_this.core.outer.hasClass('lg-zoomed')) {\r\n                _this.scale = 1;\r\n            }\r\n            else {\r\n                _this.scale = _this.getScale(scale);\r\n            }\r\n            _this.setPageCords(event);\r\n            _this.beginZoom(_this.scale);\r\n            _this.zoomImage(_this.scale, _this.scale - prevScale, true, true);\r\n        }, 50);\r\n        setTimeout(function () {\r\n            _this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\r\n        }, 60);\r\n        setTimeout(function () {\r\n            _this.zoomInProgress = false;\r\n        }, ZOOM_TRANSITION_DURATION + 110);\r\n    };\r\n    Zoom.prototype.getNaturalWidth = function (index) {\r\n        var $image = this.core.getSlideItem(index).find('.lg-image').first();\r\n        var naturalWidth = this.core.galleryItems[index].width;\r\n        return naturalWidth\r\n            ? parseFloat(naturalWidth)\r\n            : $image.get().naturalWidth;\r\n    };\r\n    Zoom.prototype.getActualSizeScale = function (naturalWidth, width) {\r\n        var _scale;\r\n        var scale;\r\n        if (naturalWidth >= width) {\r\n            _scale = naturalWidth / width;\r\n            scale = _scale || 2;\r\n        }\r\n        else {\r\n            scale = 1;\r\n        }\r\n        return scale;\r\n    };\r\n    Zoom.prototype.getCurrentImageActualSizeScale = function () {\r\n        var $image = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-image')\r\n            .first();\r\n        var width = $image.get().offsetWidth;\r\n        var naturalWidth = this.getNaturalWidth(this.core.index) || width;\r\n        return this.getActualSizeScale(naturalWidth, width);\r\n    };\r\n    Zoom.prototype.getPageCords = function (event) {\r\n        var cords = {};\r\n        if (event) {\r\n            cords.x = event.pageX || event.touches[0].pageX;\r\n            cords.y = event.pageY || event.touches[0].pageY;\r\n        }\r\n        else {\r\n            var containerRect = this.core.$content\r\n                .get()\r\n                .getBoundingClientRect();\r\n            cords.x = containerRect.width / 2 + containerRect.left;\r\n            cords.y =\r\n                containerRect.height / 2 + this.scrollTop + containerRect.top;\r\n        }\r\n        return cords;\r\n    };\r\n    Zoom.prototype.setPageCords = function (event) {\r\n        var pageCords = this.getPageCords(event);\r\n        this.pageX = pageCords.x;\r\n        this.pageY = pageCords.y;\r\n    };\r\n    Zoom.prototype.manageActualPixelClassNames = function () {\r\n        var $actualSize = this.core.getElementById('lg-actual-size');\r\n        $actualSize\r\n            .removeClass(this.settings.actualSizeIcons.zoomIn)\r\n            .addClass(this.settings.actualSizeIcons.zoomOut);\r\n    };\r\n    // If true, zoomed - in else zoomed out\r\n    Zoom.prototype.beginZoom = function (scale) {\r\n        this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\r\n        if (scale > 1) {\r\n            this.core.outer.addClass('lg-zoomed');\r\n            this.manageActualPixelClassNames();\r\n        }\r\n        else {\r\n            this.resetZoom();\r\n        }\r\n        return scale > 1;\r\n    };\r\n    Zoom.prototype.getScale = function (scale) {\r\n        var actualSizeScale = this.getCurrentImageActualSizeScale();\r\n        if (scale < 1) {\r\n            scale = 1;\r\n        }\r\n        else if (scale > actualSizeScale) {\r\n            scale = actualSizeScale;\r\n        }\r\n        return scale;\r\n    };\r\n    Zoom.prototype.init = function () {\r\n        var _this = this;\r\n        if (!this.settings.zoom) {\r\n            return;\r\n        }\r\n        this.buildTemplates();\r\n        this.enableZoomOnSlideItemLoad();\r\n        var tapped = null;\r\n        this.core.outer.on('dblclick.lg', function (event) {\r\n            if (!_this.$LG(event.target).hasClass('lg-image')) {\r\n                return;\r\n            }\r\n            _this.setActualSize(_this.core.index, event);\r\n        });\r\n        this.core.outer.on('touchstart.lg', function (event) {\r\n            var $target = _this.$LG(event.target);\r\n            if (event.touches.length === 1 && $target.hasClass('lg-image')) {\r\n                if (!tapped) {\r\n                    tapped = setTimeout(function () {\r\n                        tapped = null;\r\n                    }, 300);\r\n                }\r\n                else {\r\n                    clearTimeout(tapped);\r\n                    tapped = null;\r\n                    event.preventDefault();\r\n                    _this.setActualSize(_this.core.index, event);\r\n                }\r\n            }\r\n        });\r\n        this.core.LGel.on(lGEvents.containerResize + \".zoom \" + lGEvents.rotateRight + \".zoom \" + lGEvents.rotateLeft + \".zoom \" + lGEvents.flipHorizontal + \".zoom \" + lGEvents.flipVertical + \".zoom\", function () {\r\n            if (!_this.core.lgOpened ||\r\n                !_this.isImageSlide(_this.core.index) ||\r\n                _this.core.touchAction) {\r\n                return;\r\n            }\r\n            var _LGel = _this.core\r\n                .getSlideItem(_this.core.index)\r\n                .find('.lg-img-wrap')\r\n                .first();\r\n            _this.top = 0;\r\n            _this.left = 0;\r\n            _this.setZoomEssentials();\r\n            _this.setZoomSwipeStyles(_LGel, { x: 0, y: 0 });\r\n            _this.positionChanged = true;\r\n        });\r\n        // Update zoom on resize and orientationchange\r\n        this.$LG(window).on(\"scroll.lg.zoom.global\" + this.core.lgId, function () {\r\n            if (!_this.core.lgOpened)\r\n                return;\r\n            _this.scrollTop = _this.$LG(window).scrollTop();\r\n        });\r\n        this.core.getElementById('lg-zoom-out').on('click.lg', function () {\r\n            // Allow zoom only on image\r\n            if (!_this.isImageSlide(_this.core.index)) {\r\n                return;\r\n            }\r\n            var timeout = 0;\r\n            if (_this.imageReset) {\r\n                _this.resetImageTranslate(_this.core.index);\r\n                timeout = 50;\r\n            }\r\n            setTimeout(function () {\r\n                var scale = _this.scale - _this.settings.scale;\r\n                if (scale < 1) {\r\n                    scale = 1;\r\n                }\r\n                _this.beginZoom(scale);\r\n                _this.zoomImage(scale, -_this.settings.scale, true, !_this.settings.infiniteZoom);\r\n            }, timeout);\r\n        });\r\n        this.core.getElementById('lg-zoom-in').on('click.lg', function () {\r\n            _this.zoomIn();\r\n        });\r\n        this.core.getElementById('lg-actual-size').on('click.lg', function () {\r\n            _this.setActualSize(_this.core.index);\r\n        });\r\n        this.core.LGel.on(lGEvents.beforeOpen + \".zoom\", function () {\r\n            _this.core.outer.find('.lg-item').removeClass('lg-zoomable');\r\n        });\r\n        this.core.LGel.on(lGEvents.afterOpen + \".zoom\", function () {\r\n            _this.scrollTop = _this.$LG(window).scrollTop();\r\n            // Set the initial value center\r\n            _this.pageX = _this.core.outer.width() / 2;\r\n            _this.pageY = _this.core.outer.height() / 2 + _this.scrollTop;\r\n            _this.scale = 1;\r\n        });\r\n        // Reset zoom on slide change\r\n        this.core.LGel.on(lGEvents.afterSlide + \".zoom\", function (event) {\r\n            var prevIndex = event.detail.prevIndex;\r\n            _this.scale = 1;\r\n            _this.positionChanged = false;\r\n            _this.zoomInProgress = false;\r\n            _this.resetZoom(prevIndex);\r\n            _this.resetImageTranslate(prevIndex);\r\n            if (_this.isImageSlide(_this.core.index)) {\r\n                _this.setZoomEssentials();\r\n            }\r\n        });\r\n        // Drag option after zoom\r\n        this.zoomDrag();\r\n        this.pinchZoom();\r\n        this.zoomSwipe();\r\n        // Store the zoomable timeout value just to clear it while closing\r\n        this.zoomableTimeout = false;\r\n        this.positionChanged = false;\r\n        this.zoomInProgress = false;\r\n    };\r\n    Zoom.prototype.zoomIn = function () {\r\n        // Allow zoom only on image\r\n        if (!this.isImageSlide(this.core.index)) {\r\n            return;\r\n        }\r\n        var scale = this.scale + this.settings.scale;\r\n        if (!this.settings.infiniteZoom) {\r\n            scale = this.getScale(scale);\r\n        }\r\n        this.beginZoom(scale);\r\n        this.zoomImage(scale, Math.min(this.settings.scale, scale - this.scale), true, !this.settings.infiniteZoom);\r\n    };\r\n    // Reset zoom effect\r\n    Zoom.prototype.resetZoom = function (index) {\r\n        this.core.outer.removeClass('lg-zoomed lg-zoom-drag-transition');\r\n        var $actualSize = this.core.getElementById('lg-actual-size');\r\n        var $item = this.core.getSlideItem(index !== undefined ? index : this.core.index);\r\n        $actualSize\r\n            .removeClass(this.settings.actualSizeIcons.zoomOut)\r\n            .addClass(this.settings.actualSizeIcons.zoomIn);\r\n        $item.find('.lg-img-wrap').first().removeAttr('style');\r\n        $item.find('.lg-image').first().removeAttr('style');\r\n        this.scale = 1;\r\n        this.left = 0;\r\n        this.top = 0;\r\n        // Reset pagx pagy values to center\r\n        this.setPageCords();\r\n    };\r\n    Zoom.prototype.getTouchDistance = function (e) {\r\n        return Math.sqrt((e.touches[0].pageX - e.touches[1].pageX) *\r\n            (e.touches[0].pageX - e.touches[1].pageX) +\r\n            (e.touches[0].pageY - e.touches[1].pageY) *\r\n                (e.touches[0].pageY - e.touches[1].pageY));\r\n    };\r\n    Zoom.prototype.pinchZoom = function () {\r\n        var _this = this;\r\n        var startDist = 0;\r\n        var pinchStarted = false;\r\n        var initScale = 1;\r\n        var prevScale = 0;\r\n        var $item = this.core.getSlideItem(this.core.index);\r\n        this.core.outer.on('touchstart.lg', function (e) {\r\n            $item = _this.core.getSlideItem(_this.core.index);\r\n            if (!_this.isImageSlide(_this.core.index)) {\r\n                return;\r\n            }\r\n            if (e.touches.length === 2) {\r\n                e.preventDefault();\r\n                if (_this.core.outer.hasClass('lg-first-slide-loading')) {\r\n                    return;\r\n                }\r\n                initScale = _this.scale || 1;\r\n                _this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\r\n                _this.setPageCords(e);\r\n                _this.resetImageTranslate(_this.core.index);\r\n                _this.core.touchAction = 'pinch';\r\n                startDist = _this.getTouchDistance(e);\r\n            }\r\n        });\r\n        this.core.$inner.on('touchmove.lg', function (e) {\r\n            if (e.touches.length === 2 &&\r\n                _this.core.touchAction === 'pinch' &&\r\n                (_this.$LG(e.target).hasClass('lg-item') ||\r\n                    $item.get().contains(e.target))) {\r\n                e.preventDefault();\r\n                var endDist = _this.getTouchDistance(e);\r\n                var distance = startDist - endDist;\r\n                if (!pinchStarted && Math.abs(distance) > 5) {\r\n                    pinchStarted = true;\r\n                }\r\n                if (pinchStarted) {\r\n                    prevScale = _this.scale;\r\n                    var _scale = Math.max(1, initScale + -distance * 0.02);\r\n                    _this.scale =\r\n                        Math.round((_scale + Number.EPSILON) * 100) / 100;\r\n                    var diff = _this.scale - prevScale;\r\n                    _this.zoomImage(_this.scale, Math.round((diff + Number.EPSILON) * 100) / 100, false, false);\r\n                }\r\n            }\r\n        });\r\n        this.core.$inner.on('touchend.lg', function (e) {\r\n            if (_this.core.touchAction === 'pinch' &&\r\n                (_this.$LG(e.target).hasClass('lg-item') ||\r\n                    $item.get().contains(e.target))) {\r\n                pinchStarted = false;\r\n                startDist = 0;\r\n                if (_this.scale <= 1) {\r\n                    _this.resetZoom();\r\n                }\r\n                else {\r\n                    var actualSizeScale = _this.getCurrentImageActualSizeScale();\r\n                    if (_this.scale >= actualSizeScale) {\r\n                        var scaleDiff = actualSizeScale - _this.scale;\r\n                        if (scaleDiff === 0) {\r\n                            scaleDiff = 0.01;\r\n                        }\r\n                        _this.zoomImage(actualSizeScale, scaleDiff, false, true);\r\n                    }\r\n                    _this.manageActualPixelClassNames();\r\n                    _this.core.outer.addClass('lg-zoomed');\r\n                }\r\n                _this.core.touchAction = undefined;\r\n            }\r\n        });\r\n    };\r\n    Zoom.prototype.touchendZoom = function (startCoords, endCoords, allowX, allowY, touchDuration) {\r\n        var distanceXnew = endCoords.x - startCoords.x;\r\n        var distanceYnew = endCoords.y - startCoords.y;\r\n        var speedX = Math.abs(distanceXnew) / touchDuration + 1;\r\n        var speedY = Math.abs(distanceYnew) / touchDuration + 1;\r\n        if (speedX > 2) {\r\n            speedX += 1;\r\n        }\r\n        if (speedY > 2) {\r\n            speedY += 1;\r\n        }\r\n        distanceXnew = distanceXnew * speedX;\r\n        distanceYnew = distanceYnew * speedY;\r\n        var _LGel = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-img-wrap')\r\n            .first();\r\n        var distance = {};\r\n        distance.x = this.left + distanceXnew;\r\n        distance.y = this.top + distanceYnew;\r\n        var possibleSwipeCords = this.getPossibleSwipeDragCords();\r\n        if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {\r\n            if (allowY) {\r\n                if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\r\n                    distance.y = possibleSwipeCords.minY;\r\n                }\r\n                else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {\r\n                    distance.y = possibleSwipeCords.maxY;\r\n                }\r\n            }\r\n            if (allowX) {\r\n                if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {\r\n                    distance.x = possibleSwipeCords.minX;\r\n                }\r\n                else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {\r\n                    distance.x = possibleSwipeCords.maxX;\r\n                }\r\n            }\r\n            if (allowY) {\r\n                this.top = distance.y;\r\n            }\r\n            else {\r\n                distance.y = this.top;\r\n            }\r\n            if (allowX) {\r\n                this.left = distance.x;\r\n            }\r\n            else {\r\n                distance.x = this.left;\r\n            }\r\n            this.setZoomSwipeStyles(_LGel, distance);\r\n            this.positionChanged = true;\r\n        }\r\n    };\r\n    Zoom.prototype.getZoomSwipeCords = function (startCoords, endCoords, allowX, allowY, possibleSwipeCords) {\r\n        var distance = {};\r\n        if (allowY) {\r\n            distance.y = this.top + (endCoords.y - startCoords.y);\r\n            if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\r\n                var diffMinY = possibleSwipeCords.minY - distance.y;\r\n                distance.y = possibleSwipeCords.minY - diffMinY / 6;\r\n            }\r\n            else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {\r\n                var diffMaxY = distance.y - possibleSwipeCords.maxY;\r\n                distance.y = possibleSwipeCords.maxY + diffMaxY / 6;\r\n            }\r\n        }\r\n        else {\r\n            distance.y = this.top;\r\n        }\r\n        if (allowX) {\r\n            distance.x = this.left + (endCoords.x - startCoords.x);\r\n            if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {\r\n                var diffMinX = possibleSwipeCords.minX - distance.x;\r\n                distance.x = possibleSwipeCords.minX - diffMinX / 6;\r\n            }\r\n            else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {\r\n                var difMaxX = distance.x - possibleSwipeCords.maxX;\r\n                distance.x = possibleSwipeCords.maxX + difMaxX / 6;\r\n            }\r\n        }\r\n        else {\r\n            distance.x = this.left;\r\n        }\r\n        return distance;\r\n    };\r\n    Zoom.prototype.isBeyondPossibleLeft = function (x, minX) {\r\n        return x >= minX;\r\n    };\r\n    Zoom.prototype.isBeyondPossibleRight = function (x, maxX) {\r\n        return x <= maxX;\r\n    };\r\n    Zoom.prototype.isBeyondPossibleTop = function (y, minY) {\r\n        return y >= minY;\r\n    };\r\n    Zoom.prototype.isBeyondPossibleBottom = function (y, maxY) {\r\n        return y <= maxY;\r\n    };\r\n    Zoom.prototype.isImageSlide = function (index) {\r\n        var currentItem = this.core.galleryItems[index];\r\n        return this.core.getSlideType(currentItem) === 'image';\r\n    };\r\n    Zoom.prototype.getPossibleSwipeDragCords = function (scale) {\r\n        var $image = this.core\r\n            .getSlideItem(this.core.index)\r\n            .find('.lg-image')\r\n            .first();\r\n        var bottom = this.core.mediaContainerPosition.bottom;\r\n        var imgRect = $image.get().getBoundingClientRect();\r\n        var imageHeight = imgRect.height;\r\n        var imageWidth = imgRect.width;\r\n        if (scale) {\r\n            imageHeight = imageHeight + scale * imageHeight;\r\n            imageWidth = imageWidth + scale * imageWidth;\r\n        }\r\n        var minY = (imageHeight - this.containerRect.height) / 2;\r\n        var maxY = (this.containerRect.height - imageHeight) / 2 + bottom;\r\n        var minX = (imageWidth - this.containerRect.width) / 2;\r\n        var maxX = (this.containerRect.width - imageWidth) / 2;\r\n        var possibleSwipeCords = {\r\n            minY: minY,\r\n            maxY: maxY,\r\n            minX: minX,\r\n            maxX: maxX,\r\n        };\r\n        return possibleSwipeCords;\r\n    };\r\n    Zoom.prototype.setZoomSwipeStyles = function (LGel, distance) {\r\n        LGel.css('transform', 'translate3d(' + distance.x + 'px, ' + distance.y + 'px, 0)');\r\n    };\r\n    Zoom.prototype.zoomSwipe = function () {\r\n        var _this = this;\r\n        var startCoords = {};\r\n        var endCoords = {};\r\n        var isMoved = false;\r\n        // Allow x direction drag\r\n        var allowX = false;\r\n        // Allow Y direction drag\r\n        var allowY = false;\r\n        var startTime = new Date();\r\n        var endTime = new Date();\r\n        var possibleSwipeCords;\r\n        var _LGel;\r\n        var $item = this.core.getSlideItem(this.core.index);\r\n        this.core.$inner.on('touchstart.lg', function (e) {\r\n            // Allow zoom only on image\r\n            if (!_this.isImageSlide(_this.core.index)) {\r\n                return;\r\n            }\r\n            $item = _this.core.getSlideItem(_this.core.index);\r\n            if ((_this.$LG(e.target).hasClass('lg-item') ||\r\n                $item.get().contains(e.target)) &&\r\n                e.touches.length === 1 &&\r\n                _this.core.outer.hasClass('lg-zoomed')) {\r\n                e.preventDefault();\r\n                startTime = new Date();\r\n                _this.core.touchAction = 'zoomSwipe';\r\n                _LGel = _this.core\r\n                    .getSlideItem(_this.core.index)\r\n                    .find('.lg-img-wrap')\r\n                    .first();\r\n                var dragAllowedAxises = _this.getDragAllowedAxises(0);\r\n                allowY = dragAllowedAxises.allowY;\r\n                allowX = dragAllowedAxises.allowX;\r\n                if (allowX || allowY) {\r\n                    startCoords = _this.getSwipeCords(e);\r\n                }\r\n                possibleSwipeCords = _this.getPossibleSwipeDragCords();\r\n                // reset opacity and transition duration\r\n                _this.core.outer.addClass('lg-zoom-dragging lg-zoom-drag-transition');\r\n            }\r\n        });\r\n        this.core.$inner.on('touchmove.lg', function (e) {\r\n            if (e.touches.length === 1 &&\r\n                _this.core.touchAction === 'zoomSwipe' &&\r\n                (_this.$LG(e.target).hasClass('lg-item') ||\r\n                    $item.get().contains(e.target))) {\r\n                e.preventDefault();\r\n                _this.core.touchAction = 'zoomSwipe';\r\n                endCoords = _this.getSwipeCords(e);\r\n                var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);\r\n                if (Math.abs(endCoords.x - startCoords.x) > 15 ||\r\n                    Math.abs(endCoords.y - startCoords.y) > 15) {\r\n                    isMoved = true;\r\n                    _this.setZoomSwipeStyles(_LGel, distance);\r\n                }\r\n            }\r\n        });\r\n        this.core.$inner.on('touchend.lg', function (e) {\r\n            if (_this.core.touchAction === 'zoomSwipe' &&\r\n                (_this.$LG(e.target).hasClass('lg-item') ||\r\n                    $item.get().contains(e.target))) {\r\n                e.preventDefault();\r\n                _this.core.touchAction = undefined;\r\n                _this.core.outer.removeClass('lg-zoom-dragging');\r\n                if (!isMoved) {\r\n                    return;\r\n                }\r\n                isMoved = false;\r\n                endTime = new Date();\r\n                var touchDuration = endTime.valueOf() - startTime.valueOf();\r\n                _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration);\r\n            }\r\n        });\r\n    };\r\n    Zoom.prototype.zoomDrag = function () {\r\n        var _this = this;\r\n        var startCoords = {};\r\n        var endCoords = {};\r\n        var isDragging = false;\r\n        var isMoved = false;\r\n        // Allow x direction drag\r\n        var allowX = false;\r\n        // Allow Y direction drag\r\n        var allowY = false;\r\n        var startTime;\r\n        var endTime;\r\n        var possibleSwipeCords;\r\n        var _LGel;\r\n        this.core.outer.on('mousedown.lg.zoom', function (e) {\r\n            // Allow zoom only on image\r\n            if (!_this.isImageSlide(_this.core.index)) {\r\n                return;\r\n            }\r\n            var $item = _this.core.getSlideItem(_this.core.index);\r\n            if (_this.$LG(e.target).hasClass('lg-item') ||\r\n                $item.get().contains(e.target)) {\r\n                startTime = new Date();\r\n                _LGel = _this.core\r\n                    .getSlideItem(_this.core.index)\r\n                    .find('.lg-img-wrap')\r\n                    .first();\r\n                var dragAllowedAxises = _this.getDragAllowedAxises(0);\r\n                allowY = dragAllowedAxises.allowY;\r\n                allowX = dragAllowedAxises.allowX;\r\n                if (_this.core.outer.hasClass('lg-zoomed')) {\r\n                    if (_this.$LG(e.target).hasClass('lg-object') &&\r\n                        (allowX || allowY)) {\r\n                        e.preventDefault();\r\n                        startCoords = _this.getDragCords(e);\r\n                        possibleSwipeCords = _this.getPossibleSwipeDragCords();\r\n                        isDragging = true;\r\n                        _this.core.outer\r\n                            .removeClass('lg-grab')\r\n                            .addClass('lg-grabbing lg-zoom-drag-transition lg-zoom-dragging');\r\n                        // reset opacity and transition duration\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.$LG(window).on(\"mousemove.lg.zoom.global\" + this.core.lgId, function (e) {\r\n            if (isDragging) {\r\n                isMoved = true;\r\n                endCoords = _this.getDragCords(e);\r\n                var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);\r\n                _this.setZoomSwipeStyles(_LGel, distance);\r\n            }\r\n        });\r\n        this.$LG(window).on(\"mouseup.lg.zoom.global\" + this.core.lgId, function (e) {\r\n            if (isDragging) {\r\n                endTime = new Date();\r\n                isDragging = false;\r\n                _this.core.outer.removeClass('lg-zoom-dragging');\r\n                // Fix for chrome mouse move on click\r\n                if (isMoved &&\r\n                    (startCoords.x !== endCoords.x ||\r\n                        startCoords.y !== endCoords.y)) {\r\n                    endCoords = _this.getDragCords(e);\r\n                    var touchDuration = endTime.valueOf() - startTime.valueOf();\r\n                    _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration);\r\n                }\r\n                isMoved = false;\r\n            }\r\n            _this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\r\n        });\r\n    };\r\n    Zoom.prototype.closeGallery = function () {\r\n        this.resetZoom();\r\n        this.zoomInProgress = false;\r\n    };\r\n    Zoom.prototype.destroy = function () {\r\n        // Unbind all events added by lightGallery zoom plugin\r\n        this.$LG(window).off(\".lg.zoom.global\" + this.core.lgId);\r\n        this.core.LGel.off('.lg.zoom');\r\n        this.core.LGel.off('.zoom');\r\n        clearTimeout(this.zoomableTimeout);\r\n        this.zoomableTimeout = false;\r\n    };\r\n    return Zoom;\r\n}());\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Zoom);\n//# sourceMappingURL=lg-zoom.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/react/Lightgallery.es5.js":
/*!*************************************************************!*\
  !*** ./node_modules/lightgallery/react/Lightgallery.es5.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\n/*!\n * lightgallery | 2.8.3 | March 1st 2025\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */\r\nvar lGEvents = {\r\n    afterAppendSlide: 'lgAfterAppendSlide',\r\n    init: 'lgInit',\r\n    hasVideo: 'lgHasVideo',\r\n    containerResize: 'lgContainerResize',\r\n    updateSlides: 'lgUpdateSlides',\r\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\r\n    beforeOpen: 'lgBeforeOpen',\r\n    afterOpen: 'lgAfterOpen',\r\n    slideItemLoad: 'lgSlideItemLoad',\r\n    beforeSlide: 'lgBeforeSlide',\r\n    afterSlide: 'lgAfterSlide',\r\n    posterClick: 'lgPosterClick',\r\n    dragStart: 'lgDragStart',\r\n    dragMove: 'lgDragMove',\r\n    dragEnd: 'lgDragEnd',\r\n    beforeNextSlide: 'lgBeforeNextSlide',\r\n    beforePrevSlide: 'lgBeforePrevSlide',\r\n    beforeClose: 'lgBeforeClose',\r\n    afterClose: 'lgAfterClose',\r\n    rotateLeft: 'lgRotateLeft',\r\n    rotateRight: 'lgRotateRight',\r\n    flipHorizontal: 'lgFlipHorizontal',\r\n    flipVertical: 'lgFlipVertical',\r\n    autoplay: 'lgAutoplay',\r\n    autoplayStart: 'lgAutoplayStart',\r\n    autoplayStop: 'lgAutoplayStop',\r\n};\n\nvar lightGalleryCoreSettings = {\r\n    mode: 'lg-slide',\r\n    easing: 'ease',\r\n    speed: 400,\r\n    licenseKey: '0000-0000-000-0000',\r\n    height: '100%',\r\n    width: '100%',\r\n    addClass: '',\r\n    startClass: 'lg-start-zoom',\r\n    backdropDuration: 300,\r\n    container: '',\r\n    startAnimationDuration: 400,\r\n    zoomFromOrigin: true,\r\n    hideBarsDelay: 0,\r\n    showBarsAfter: 10000,\r\n    slideDelay: 0,\r\n    supportLegacyBrowser: true,\r\n    allowMediaOverlap: false,\r\n    videoMaxSize: '1280-720',\r\n    loadYouTubePoster: true,\r\n    defaultCaptionHeight: 0,\r\n    ariaLabelledby: '',\r\n    ariaDescribedby: '',\r\n    resetScrollPosition: true,\r\n    hideScrollbar: false,\r\n    closable: true,\r\n    swipeToClose: true,\r\n    closeOnTap: true,\r\n    showCloseIcon: true,\r\n    showMaximizeIcon: false,\r\n    loop: true,\r\n    escKey: true,\r\n    keyPress: true,\r\n    trapFocus: true,\r\n    controls: true,\r\n    slideEndAnimation: true,\r\n    hideControlOnEnd: false,\r\n    mousewheel: false,\r\n    getCaptionFromTitleOrAlt: true,\r\n    appendSubHtmlTo: '.lg-sub-html',\r\n    subHtmlSelectorRelative: false,\r\n    preload: 2,\r\n    numberOfSlideItemsInDom: 10,\r\n    selector: '',\r\n    selectWithin: '',\r\n    nextHtml: '',\r\n    prevHtml: '',\r\n    index: 0,\r\n    iframeWidth: '100%',\r\n    iframeHeight: '100%',\r\n    iframeMaxWidth: '100%',\r\n    iframeMaxHeight: '100%',\r\n    download: true,\r\n    counter: true,\r\n    appendCounterTo: '.lg-toolbar',\r\n    swipeThreshold: 50,\r\n    enableSwipe: true,\r\n    enableDrag: true,\r\n    dynamic: false,\r\n    dynamicEl: [],\r\n    extraProps: [],\r\n    exThumbImage: '',\r\n    isMobile: undefined,\r\n    mobileSettings: {\r\n        controls: false,\r\n        showCloseIcon: false,\r\n        download: false,\r\n    },\r\n    plugins: [],\r\n    strings: {\r\n        closeGallery: 'Close gallery',\r\n        toggleMaximize: 'Toggle maximize',\r\n        previousSlide: 'Previous slide',\r\n        nextSlide: 'Next slide',\r\n        download: 'Download',\r\n        playVideo: 'Play video',\r\n        mediaLoadingFailed: 'Oops... Failed to load content...',\r\n    },\r\n};\n\nfunction initLgPolyfills() {\r\n    (function () {\r\n        if (typeof window.CustomEvent === 'function')\r\n            return false;\r\n        function CustomEvent(event, params) {\r\n            params = params || {\r\n                bubbles: false,\r\n                cancelable: false,\r\n                detail: null,\r\n            };\r\n            var evt = document.createEvent('CustomEvent');\r\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n            return evt;\r\n        }\r\n        window.CustomEvent = CustomEvent;\r\n    })();\r\n    (function () {\r\n        if (!Element.prototype.matches) {\r\n            Element.prototype.matches =\r\n                Element.prototype.msMatchesSelector ||\r\n                    Element.prototype.webkitMatchesSelector;\r\n        }\r\n    })();\r\n}\r\nvar lgQuery = /** @class */ (function () {\r\n    function lgQuery(selector) {\r\n        this.cssVenderPrefixes = [\r\n            'TransitionDuration',\r\n            'TransitionTimingFunction',\r\n            'Transform',\r\n            'Transition',\r\n        ];\r\n        this.selector = this._getSelector(selector);\r\n        this.firstElement = this._getFirstEl();\r\n        return this;\r\n    }\r\n    lgQuery.generateUUID = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    lgQuery.prototype._getSelector = function (selector, context) {\r\n        if (context === void 0) { context = document; }\r\n        if (typeof selector !== 'string') {\r\n            return selector;\r\n        }\r\n        context = context || document;\r\n        var fl = selector.substring(0, 1);\r\n        if (fl === '#') {\r\n            return context.querySelector(selector);\r\n        }\r\n        else {\r\n            return context.querySelectorAll(selector);\r\n        }\r\n    };\r\n    lgQuery.prototype._each = function (func) {\r\n        if (!this.selector) {\r\n            return this;\r\n        }\r\n        if (this.selector.length !== undefined) {\r\n            [].forEach.call(this.selector, func);\r\n        }\r\n        else {\r\n            func(this.selector, 0);\r\n        }\r\n        return this;\r\n    };\r\n    lgQuery.prototype._setCssVendorPrefix = function (el, cssProperty, value) {\r\n        // prettier-ignore\r\n        var property = cssProperty.replace(/-([a-z])/gi, function (s, group1) {\r\n            return group1.toUpperCase();\r\n        });\r\n        if (this.cssVenderPrefixes.indexOf(property) !== -1) {\r\n            el.style[property.charAt(0).toLowerCase() + property.slice(1)] = value;\r\n            el.style['webkit' + property] = value;\r\n            el.style['moz' + property] = value;\r\n            el.style['ms' + property] = value;\r\n            el.style['o' + property] = value;\r\n        }\r\n        else {\r\n            el.style[property] = value;\r\n        }\r\n    };\r\n    lgQuery.prototype._getFirstEl = function () {\r\n        if (this.selector && this.selector.length !== undefined) {\r\n            return this.selector[0];\r\n        }\r\n        else {\r\n            return this.selector;\r\n        }\r\n    };\r\n    lgQuery.prototype.isEventMatched = function (event, eventName) {\r\n        var eventNamespace = eventName.split('.');\r\n        return event\r\n            .split('.')\r\n            .filter(function (e) { return e; })\r\n            .every(function (e) {\r\n            return eventNamespace.indexOf(e) !== -1;\r\n        });\r\n    };\r\n    lgQuery.prototype.attr = function (attr, value) {\r\n        if (value === undefined) {\r\n            if (!this.firstElement) {\r\n                return '';\r\n            }\r\n            return this.firstElement.getAttribute(attr);\r\n        }\r\n        this._each(function (el) {\r\n            el.setAttribute(attr, value);\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.find = function (selector) {\r\n        return $LG(this._getSelector(selector, this.selector));\r\n    };\r\n    lgQuery.prototype.first = function () {\r\n        if (this.selector && this.selector.length !== undefined) {\r\n            return $LG(this.selector[0]);\r\n        }\r\n        else {\r\n            return $LG(this.selector);\r\n        }\r\n    };\r\n    lgQuery.prototype.eq = function (index) {\r\n        return $LG(this.selector[index]);\r\n    };\r\n    lgQuery.prototype.parent = function () {\r\n        return $LG(this.selector.parentElement);\r\n    };\r\n    lgQuery.prototype.get = function () {\r\n        return this._getFirstEl();\r\n    };\r\n    lgQuery.prototype.removeAttr = function (attributes) {\r\n        var attrs = attributes.split(' ');\r\n        this._each(function (el) {\r\n            attrs.forEach(function (attr) { return el.removeAttribute(attr); });\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.wrap = function (className) {\r\n        if (!this.firstElement) {\r\n            return this;\r\n        }\r\n        var wrapper = document.createElement('div');\r\n        wrapper.className = className;\r\n        this.firstElement.parentNode.insertBefore(wrapper, this.firstElement);\r\n        this.firstElement.parentNode.removeChild(this.firstElement);\r\n        wrapper.appendChild(this.firstElement);\r\n        return this;\r\n    };\r\n    lgQuery.prototype.addClass = function (classNames) {\r\n        if (classNames === void 0) { classNames = ''; }\r\n        this._each(function (el) {\r\n            // IE doesn't support multiple arguments\r\n            classNames.split(' ').forEach(function (className) {\r\n                if (className) {\r\n                    el.classList.add(className);\r\n                }\r\n            });\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.removeClass = function (classNames) {\r\n        this._each(function (el) {\r\n            // IE doesn't support multiple arguments\r\n            classNames.split(' ').forEach(function (className) {\r\n                if (className) {\r\n                    el.classList.remove(className);\r\n                }\r\n            });\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.hasClass = function (className) {\r\n        if (!this.firstElement) {\r\n            return false;\r\n        }\r\n        return this.firstElement.classList.contains(className);\r\n    };\r\n    lgQuery.prototype.hasAttribute = function (attribute) {\r\n        if (!this.firstElement) {\r\n            return false;\r\n        }\r\n        return this.firstElement.hasAttribute(attribute);\r\n    };\r\n    lgQuery.prototype.toggleClass = function (className) {\r\n        if (!this.firstElement) {\r\n            return this;\r\n        }\r\n        if (this.hasClass(className)) {\r\n            this.removeClass(className);\r\n        }\r\n        else {\r\n            this.addClass(className);\r\n        }\r\n        return this;\r\n    };\r\n    lgQuery.prototype.css = function (property, value) {\r\n        var _this = this;\r\n        this._each(function (el) {\r\n            _this._setCssVendorPrefix(el, property, value);\r\n        });\r\n        return this;\r\n    };\r\n    // Need to pass separate namespaces for separate elements\r\n    lgQuery.prototype.on = function (events, listener) {\r\n        var _this = this;\r\n        if (!this.selector) {\r\n            return this;\r\n        }\r\n        events.split(' ').forEach(function (event) {\r\n            if (!Array.isArray(lgQuery.eventListeners[event])) {\r\n                lgQuery.eventListeners[event] = [];\r\n            }\r\n            lgQuery.eventListeners[event].push(listener);\r\n            _this.selector.addEventListener(event.split('.')[0], listener);\r\n        });\r\n        return this;\r\n    };\r\n    // @todo - test this\r\n    lgQuery.prototype.once = function (event, listener) {\r\n        var _this = this;\r\n        this.on(event, function () {\r\n            _this.off(event);\r\n            listener(event);\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.off = function (event) {\r\n        var _this = this;\r\n        if (!this.selector) {\r\n            return this;\r\n        }\r\n        Object.keys(lgQuery.eventListeners).forEach(function (eventName) {\r\n            if (_this.isEventMatched(event, eventName)) {\r\n                lgQuery.eventListeners[eventName].forEach(function (listener) {\r\n                    _this.selector.removeEventListener(eventName.split('.')[0], listener);\r\n                });\r\n                lgQuery.eventListeners[eventName] = [];\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.trigger = function (event, detail) {\r\n        if (!this.firstElement) {\r\n            return this;\r\n        }\r\n        var customEvent = new CustomEvent(event.split('.')[0], {\r\n            detail: detail || null,\r\n        });\r\n        this.firstElement.dispatchEvent(customEvent);\r\n        return this;\r\n    };\r\n    // Does not support IE\r\n    lgQuery.prototype.load = function (url) {\r\n        var _this = this;\r\n        fetch(url)\r\n            .then(function (res) { return res.text(); })\r\n            .then(function (html) {\r\n            _this.selector.innerHTML = html;\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.html = function (html) {\r\n        if (html === undefined) {\r\n            if (!this.firstElement) {\r\n                return '';\r\n            }\r\n            return this.firstElement.innerHTML;\r\n        }\r\n        this._each(function (el) {\r\n            el.innerHTML = html;\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.append = function (html) {\r\n        this._each(function (el) {\r\n            if (typeof html === 'string') {\r\n                el.insertAdjacentHTML('beforeend', html);\r\n            }\r\n            else {\r\n                el.appendChild(html);\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.prepend = function (html) {\r\n        this._each(function (el) {\r\n            if (typeof html === 'string') {\r\n                el.insertAdjacentHTML('afterbegin', html);\r\n            }\r\n            else if (html instanceof HTMLElement) {\r\n                el.insertBefore(html.cloneNode(true), el.firstChild);\r\n            }\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.remove = function () {\r\n        this._each(function (el) {\r\n            el.parentNode.removeChild(el);\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.empty = function () {\r\n        this._each(function (el) {\r\n            el.innerHTML = '';\r\n        });\r\n        return this;\r\n    };\r\n    lgQuery.prototype.scrollTop = function (scrollTop) {\r\n        if (scrollTop !== undefined) {\r\n            document.body.scrollTop = scrollTop;\r\n            document.documentElement.scrollTop = scrollTop;\r\n            return this;\r\n        }\r\n        else {\r\n            return (window.pageYOffset ||\r\n                document.documentElement.scrollTop ||\r\n                document.body.scrollTop ||\r\n                0);\r\n        }\r\n    };\r\n    lgQuery.prototype.scrollLeft = function (scrollLeft) {\r\n        if (scrollLeft !== undefined) {\r\n            document.body.scrollLeft = scrollLeft;\r\n            document.documentElement.scrollLeft = scrollLeft;\r\n            return this;\r\n        }\r\n        else {\r\n            return (window.pageXOffset ||\r\n                document.documentElement.scrollLeft ||\r\n                document.body.scrollLeft ||\r\n                0);\r\n        }\r\n    };\r\n    lgQuery.prototype.offset = function () {\r\n        if (!this.firstElement) {\r\n            return {\r\n                left: 0,\r\n                top: 0,\r\n            };\r\n        }\r\n        var rect = this.firstElement.getBoundingClientRect();\r\n        var bodyMarginLeft = $LG('body').style().marginLeft;\r\n        // Minus body margin - https://stackoverflow.com/questions/30711548/is-getboundingclientrect-left-returning-a-wrong-value\r\n        return {\r\n            left: rect.left - parseFloat(bodyMarginLeft) + this.scrollLeft(),\r\n            top: rect.top + this.scrollTop(),\r\n        };\r\n    };\r\n    lgQuery.prototype.style = function () {\r\n        if (!this.firstElement) {\r\n            return {};\r\n        }\r\n        return (this.firstElement.currentStyle ||\r\n            window.getComputedStyle(this.firstElement));\r\n    };\r\n    // Width without padding and border even if box-sizing is used.\r\n    lgQuery.prototype.width = function () {\r\n        var style = this.style();\r\n        return (this.firstElement.clientWidth -\r\n            parseFloat(style.paddingLeft) -\r\n            parseFloat(style.paddingRight));\r\n    };\r\n    // Height without padding and border even if box-sizing is used.\r\n    lgQuery.prototype.height = function () {\r\n        var style = this.style();\r\n        return (this.firstElement.clientHeight -\r\n            parseFloat(style.paddingTop) -\r\n            parseFloat(style.paddingBottom));\r\n    };\r\n    lgQuery.eventListeners = {};\r\n    return lgQuery;\r\n}());\r\nfunction $LG(selector) {\r\n    initLgPolyfills();\r\n    return new lgQuery(selector);\r\n}\n\nvar defaultDynamicOptions = [\r\n    'src',\r\n    'sources',\r\n    'subHtml',\r\n    'subHtmlUrl',\r\n    'html',\r\n    'video',\r\n    'poster',\r\n    'slideName',\r\n    'responsive',\r\n    'srcset',\r\n    'sizes',\r\n    'iframe',\r\n    'downloadUrl',\r\n    'download',\r\n    'width',\r\n    'facebookShareUrl',\r\n    'tweetText',\r\n    'iframeTitle',\r\n    'twitterShareUrl',\r\n    'pinterestShareUrl',\r\n    'pinterestText',\r\n    'fbHtml',\r\n    'disqusIdentifier',\r\n    'disqusUrl',\r\n];\r\n// Convert html data-attribute to camalcase\r\nfunction convertToData(attr) {\r\n    // FInd a way for lgsize\r\n    if (attr === 'href') {\r\n        return 'src';\r\n    }\r\n    attr = attr.replace('data-', '');\r\n    attr = attr.charAt(0).toLowerCase() + attr.slice(1);\r\n    attr = attr.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });\r\n    return attr;\r\n}\r\nvar utils = {\r\n    /**\r\n     * Fetches HTML content from a given URL and inserts it into a specified element.\r\n     *\r\n     * @param url - The URL to fetch the HTML content from.\r\n     * @param element - The DOM element (jQuery object) to insert the HTML content into.\r\n     * @param insertMethod - The method to insert the HTML ('append' or 'replace').\r\n     */\r\n    fetchCaptionFromUrl: function (url, element, insertMethod) {\r\n        // Fetch content from the URL\r\n        fetch(url)\r\n            .then(function (response) { return response.text(); })\r\n            .then(function (htmlContent) {\r\n            if (insertMethod === 'append') {\r\n                var contentDiv = \"<div class=\\\"lg-sub-html\\\">\" + htmlContent + \"</div>\";\r\n                element.append(contentDiv);\r\n            }\r\n            else {\r\n                element.html(htmlContent);\r\n            }\r\n        });\r\n    },\r\n    /**\r\n     * get possible width and height from the lgSize attribute. Used for ZoomFromOrigin option\r\n     */\r\n    getSize: function (el, container, spacing, defaultLgSize) {\r\n        if (spacing === void 0) { spacing = 0; }\r\n        var LGel = $LG(el);\r\n        var lgSize = LGel.attr('data-lg-size') || defaultLgSize;\r\n        if (!lgSize) {\r\n            return;\r\n        }\r\n        var isResponsiveSizes = lgSize.split(',');\r\n        // if at-least two viewport sizes are available\r\n        if (isResponsiveSizes[1]) {\r\n            var wWidth = window.innerWidth;\r\n            for (var i = 0; i < isResponsiveSizes.length; i++) {\r\n                var size_1 = isResponsiveSizes[i];\r\n                var responsiveWidth = parseInt(size_1.split('-')[2], 10);\r\n                if (responsiveWidth > wWidth) {\r\n                    lgSize = size_1;\r\n                    break;\r\n                }\r\n                // take last item as last option\r\n                if (i === isResponsiveSizes.length - 1) {\r\n                    lgSize = size_1;\r\n                }\r\n            }\r\n        }\r\n        var size = lgSize.split('-');\r\n        var width = parseInt(size[0], 10);\r\n        var height = parseInt(size[1], 10);\r\n        var cWidth = container.width();\r\n        var cHeight = container.height() - spacing;\r\n        var maxWidth = Math.min(cWidth, width);\r\n        var maxHeight = Math.min(cHeight, height);\r\n        var ratio = Math.min(maxWidth / width, maxHeight / height);\r\n        return { width: width * ratio, height: height * ratio };\r\n    },\r\n    /**\r\n     * @desc Get transform value based on the imageSize. Used for ZoomFromOrigin option\r\n     * @param {jQuery Element}\r\n     * @returns {String} Transform CSS string\r\n     */\r\n    getTransform: function (el, container, top, bottom, imageSize) {\r\n        if (!imageSize) {\r\n            return;\r\n        }\r\n        var LGel = $LG(el).find('img').first();\r\n        if (!LGel.get()) {\r\n            return;\r\n        }\r\n        var containerRect = container.get().getBoundingClientRect();\r\n        var wWidth = containerRect.width;\r\n        // using innerWidth to include mobile safari bottom bar\r\n        var wHeight = container.height() - (top + bottom);\r\n        var elWidth = LGel.width();\r\n        var elHeight = LGel.height();\r\n        var elStyle = LGel.style();\r\n        var x = (wWidth - elWidth) / 2 -\r\n            LGel.offset().left +\r\n            (parseFloat(elStyle.paddingLeft) || 0) +\r\n            (parseFloat(elStyle.borderLeft) || 0) +\r\n            $LG(window).scrollLeft() +\r\n            containerRect.left;\r\n        var y = (wHeight - elHeight) / 2 -\r\n            LGel.offset().top +\r\n            (parseFloat(elStyle.paddingTop) || 0) +\r\n            (parseFloat(elStyle.borderTop) || 0) +\r\n            $LG(window).scrollTop() +\r\n            top;\r\n        var scX = elWidth / imageSize.width;\r\n        var scY = elHeight / imageSize.height;\r\n        var transform = 'translate3d(' +\r\n            (x *= -1) +\r\n            'px, ' +\r\n            (y *= -1) +\r\n            'px, 0) scale3d(' +\r\n            scX +\r\n            ', ' +\r\n            scY +\r\n            ', 1)';\r\n        return transform;\r\n    },\r\n    getIframeMarkup: function (iframeWidth, iframeHeight, iframeMaxWidth, iframeMaxHeight, src, iframeTitle) {\r\n        var title = iframeTitle ? 'title=\"' + iframeTitle + '\"' : '';\r\n        return \"<div class=\\\"lg-media-cont lg-has-iframe\\\" style=\\\"width:\" + iframeWidth + \"; max-width:\" + iframeMaxWidth + \"; height: \" + iframeHeight + \"; max-height:\" + iframeMaxHeight + \"\\\">\\n                    <iframe class=\\\"lg-object\\\" frameborder=\\\"0\\\" \" + title + \" src=\\\"\" + src + \"\\\"  allowfullscreen=\\\"true\\\"></iframe>\\n                </div>\";\r\n    },\r\n    getImgMarkup: function (index, src, altAttr, srcset, sizes, sources) {\r\n        var srcsetAttr = srcset ? \"srcset=\\\"\" + srcset + \"\\\"\" : '';\r\n        var sizesAttr = sizes ? \"sizes=\\\"\" + sizes + \"\\\"\" : '';\r\n        var imgMarkup = \"<img \" + altAttr + \" \" + srcsetAttr + \"  \" + sizesAttr + \" class=\\\"lg-object lg-image\\\" data-index=\\\"\" + index + \"\\\" src=\\\"\" + src + \"\\\" />\";\r\n        var sourceTag = '';\r\n        if (sources) {\r\n            var sourceObj = typeof sources === 'string' ? JSON.parse(sources) : sources;\r\n            sourceTag = sourceObj.map(function (source) {\r\n                var attrs = '';\r\n                Object.keys(source).forEach(function (key) {\r\n                    // Do not remove the first space as it is required to separate the attributes\r\n                    attrs += \" \" + key + \"=\\\"\" + source[key] + \"\\\"\";\r\n                });\r\n                return \"<source \" + attrs + \"></source>\";\r\n            });\r\n        }\r\n        return \"\" + sourceTag + imgMarkup;\r\n    },\r\n    // Get src from responsive src\r\n    getResponsiveSrc: function (srcItms) {\r\n        var rsWidth = [];\r\n        var rsSrc = [];\r\n        var src = '';\r\n        for (var i = 0; i < srcItms.length; i++) {\r\n            var _src = srcItms[i].split(' ');\r\n            // Manage empty space\r\n            if (_src[0] === '') {\r\n                _src.splice(0, 1);\r\n            }\r\n            rsSrc.push(_src[0]);\r\n            rsWidth.push(_src[1]);\r\n        }\r\n        var wWidth = window.innerWidth;\r\n        for (var j = 0; j < rsWidth.length; j++) {\r\n            if (parseInt(rsWidth[j], 10) > wWidth) {\r\n                src = rsSrc[j];\r\n                break;\r\n            }\r\n        }\r\n        return src;\r\n    },\r\n    isImageLoaded: function (img) {\r\n        if (!img)\r\n            return false;\r\n        // During the onload event, IE correctly identifies any images that\r\n        // weren’t downloaded as not complete. Others should too. Gecko-based\r\n        // browsers act like NS4 in that they report this incorrectly.\r\n        if (!img.complete) {\r\n            return false;\r\n        }\r\n        // However, they do have two very useful properties: naturalWidth and\r\n        // naturalHeight. These give the true size of the image. If it failed\r\n        // to load, either of these should be zero.\r\n        if (img.naturalWidth === 0) {\r\n            return false;\r\n        }\r\n        // No other way of checking: assume it’s ok.\r\n        return true;\r\n    },\r\n    getVideoPosterMarkup: function (_poster, dummyImg, videoContStyle, playVideoString, _isVideo) {\r\n        var videoClass = '';\r\n        if (_isVideo && _isVideo.youtube) {\r\n            videoClass = 'lg-has-youtube';\r\n        }\r\n        else if (_isVideo && _isVideo.vimeo) {\r\n            videoClass = 'lg-has-vimeo';\r\n        }\r\n        else {\r\n            videoClass = 'lg-has-html5';\r\n        }\r\n        var _dummy = dummyImg;\r\n        if (typeof dummyImg !== 'string') {\r\n            _dummy = dummyImg.outerHTML;\r\n        }\r\n        return \"<div class=\\\"lg-video-cont \" + videoClass + \"\\\" style=\\\"\" + videoContStyle + \"\\\">\\n                <div class=\\\"lg-video-play-button\\\">\\n                <svg\\n                    viewBox=\\\"0 0 20 20\\\"\\n                    preserveAspectRatio=\\\"xMidYMid\\\"\\n                    focusable=\\\"false\\\"\\n                    aria-labelledby=\\\"\" + playVideoString + \"\\\"\\n                    role=\\\"img\\\"\\n                    class=\\\"lg-video-play-icon\\\"\\n                >\\n                    <title>\" + playVideoString + \"</title>\\n                    <polygon class=\\\"lg-video-play-icon-inner\\\" points=\\\"1,0 20,10 1,20\\\"></polygon>\\n                </svg>\\n                <svg class=\\\"lg-video-play-icon-bg\\\" viewBox=\\\"0 0 50 50\\\" focusable=\\\"false\\\">\\n                    <circle cx=\\\"50%\\\" cy=\\\"50%\\\" r=\\\"20\\\"></circle></svg>\\n                <svg class=\\\"lg-video-play-icon-circle\\\" viewBox=\\\"0 0 50 50\\\" focusable=\\\"false\\\">\\n                    <circle cx=\\\"50%\\\" cy=\\\"50%\\\" r=\\\"20\\\"></circle>\\n                </svg>\\n            </div>\\n            \" + _dummy + \"\\n            <img class=\\\"lg-object lg-video-poster\\\" src=\\\"\" + _poster + \"\\\" />\\n        </div>\";\r\n    },\r\n    getFocusableElements: function (container) {\r\n        var elements = container.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])');\r\n        var visibleElements = [].filter.call(elements, function (element) {\r\n            var style = window.getComputedStyle(element);\r\n            return style.display !== 'none' && style.visibility !== 'hidden';\r\n        });\r\n        return visibleElements;\r\n    },\r\n    /**\r\n     * @desc Create dynamic elements array from gallery items when dynamic option is false\r\n     * It helps to avoid frequent DOM interaction\r\n     * and avoid multiple checks for dynamic elments\r\n     *\r\n     * @returns {Array} dynamicEl\r\n     */\r\n    getDynamicOptions: function (items, extraProps, getCaptionFromTitleOrAlt, exThumbImage) {\r\n        var dynamicElements = [];\r\n        var availableDynamicOptions = __spreadArrays(defaultDynamicOptions, extraProps);\r\n        [].forEach.call(items, function (item) {\r\n            var dynamicEl = {};\r\n            for (var i = 0; i < item.attributes.length; i++) {\r\n                var attr = item.attributes[i];\r\n                if (attr.specified) {\r\n                    var dynamicAttr = convertToData(attr.name);\r\n                    var label = '';\r\n                    if (availableDynamicOptions.indexOf(dynamicAttr) > -1) {\r\n                        label = dynamicAttr;\r\n                    }\r\n                    if (label) {\r\n                        dynamicEl[label] = attr.value;\r\n                    }\r\n                }\r\n            }\r\n            var currentItem = $LG(item);\r\n            var alt = currentItem.find('img').first().attr('alt');\r\n            var title = currentItem.attr('title');\r\n            var thumb = exThumbImage\r\n                ? currentItem.attr(exThumbImage)\r\n                : currentItem.find('img').first().attr('src');\r\n            dynamicEl.thumb = thumb;\r\n            if (getCaptionFromTitleOrAlt && !dynamicEl.subHtml) {\r\n                dynamicEl.subHtml = title || alt || '';\r\n            }\r\n            dynamicEl.alt = alt || title || '';\r\n            dynamicElements.push(dynamicEl);\r\n        });\r\n        return dynamicElements;\r\n    },\r\n    isMobile: function () {\r\n        return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n    },\r\n    /**\r\n     * @desc Check the given src is video\r\n     * @param {String} src\r\n     * @return {Object} video type\r\n     * Ex:{ youtube  :  [\"//www.youtube.com/watch?v=c0asJgSyxcY\", \"c0asJgSyxcY\"] }\r\n     *\r\n     * @todo - this information can be moved to dynamicEl to avoid frequent calls\r\n     */\r\n    isVideo: function (src, isHTML5VIdeo, index) {\r\n        if (!src) {\r\n            if (isHTML5VIdeo) {\r\n                return {\r\n                    html5: true,\r\n                };\r\n            }\r\n            else {\r\n                console.error('lightGallery :- data-src is not provided on slide item ' +\r\n                    (index + 1) +\r\n                    '. Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/');\r\n                return;\r\n            }\r\n        }\r\n        var youtube = src.match(/\\/\\/(?:www\\.)?youtu(?:\\.be|be\\.com|be-nocookie\\.com)\\/(?:watch\\?v=|embed\\/)?([a-z0-9\\-\\_\\%]+)([\\&|?][\\S]*)*/i);\r\n        var vimeo = src.match(/\\/\\/(?:www\\.)?(?:player\\.)?vimeo.com\\/(?:video\\/)?([0-9a-z\\-_]+)(.*)?/i);\r\n        var wistia = src.match(/https?:\\/\\/(.+)?(wistia\\.com|wi\\.st)\\/(medias|embed)\\/([0-9a-z\\-_]+)(.*)/);\r\n        if (youtube) {\r\n            return {\r\n                youtube: youtube,\r\n            };\r\n        }\r\n        else if (vimeo) {\r\n            return {\r\n                vimeo: vimeo,\r\n            };\r\n        }\r\n        else if (wistia) {\r\n            return {\r\n                wistia: wistia,\r\n            };\r\n        }\r\n    },\r\n};\n\n// @ref - https://stackoverflow.com/questions/3971841/how-to-resize-images-proportionally-keeping-the-aspect-ratio\r\n// @ref - https://2ality.com/2017/04/setting-up-multi-platform-packages.html\r\n// Unique id for each gallery\r\nvar lgId = 0;\r\nvar LightGallery = /** @class */ (function () {\r\n    function LightGallery(element, options) {\r\n        this.lgOpened = false;\r\n        this.index = 0;\r\n        // lightGallery modules\r\n        this.plugins = [];\r\n        // false when lightGallery load first slide content;\r\n        this.lGalleryOn = false;\r\n        // True when a slide animation is in progress\r\n        this.lgBusy = false;\r\n        this.currentItemsInDom = [];\r\n        // Scroll top value before lightGallery is opened\r\n        this.prevScrollTop = 0;\r\n        this.bodyPaddingRight = 0;\r\n        this.isDummyImageRemoved = false;\r\n        this.dragOrSwipeEnabled = false;\r\n        this.mediaContainerPosition = {\r\n            top: 0,\r\n            bottom: 0,\r\n        };\r\n        if (!element) {\r\n            return this;\r\n        }\r\n        lgId++;\r\n        this.lgId = lgId;\r\n        this.el = element;\r\n        this.LGel = $LG(element);\r\n        this.generateSettings(options);\r\n        this.buildModules();\r\n        // When using dynamic mode, ensure dynamicEl is an array\r\n        if (this.settings.dynamic &&\r\n            this.settings.dynamicEl !== undefined &&\r\n            !Array.isArray(this.settings.dynamicEl)) {\r\n            throw 'When using dynamic mode, you must also define dynamicEl as an Array.';\r\n        }\r\n        this.galleryItems = this.getItems();\r\n        this.normalizeSettings();\r\n        // Gallery items\r\n        this.init();\r\n        this.validateLicense();\r\n        return this;\r\n    }\r\n    LightGallery.prototype.generateSettings = function (options) {\r\n        // lightGallery settings\r\n        this.settings = __assign(__assign({}, lightGalleryCoreSettings), options);\r\n        if (this.settings.isMobile &&\r\n            typeof this.settings.isMobile === 'function'\r\n            ? this.settings.isMobile()\r\n            : utils.isMobile()) {\r\n            var mobileSettings = __assign(__assign({}, this.settings.mobileSettings), this.settings.mobileSettings);\r\n            this.settings = __assign(__assign({}, this.settings), mobileSettings);\r\n        }\r\n    };\r\n    LightGallery.prototype.normalizeSettings = function () {\r\n        if (this.settings.slideEndAnimation) {\r\n            this.settings.hideControlOnEnd = false;\r\n        }\r\n        if (!this.settings.closable) {\r\n            this.settings.swipeToClose = false;\r\n        }\r\n        // And reset it on close to get the correct value next time\r\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\r\n        // At the moment, Zoom from image doesn't support dynamic options\r\n        // @todo add zoomFromOrigin support for dynamic images\r\n        if (this.settings.dynamic) {\r\n            this.zoomFromOrigin = false;\r\n        }\r\n        if (this.settings.container) {\r\n            var container = this.settings.container;\r\n            if (typeof container === 'function') {\r\n                this.settings.container = container();\r\n            }\r\n            else if (typeof container === 'string') {\r\n                var el = document.querySelector(container);\r\n                this.settings.container = el !== null && el !== void 0 ? el : document.body;\r\n            }\r\n        }\r\n        else {\r\n            this.settings.container = document.body;\r\n        }\r\n        // settings.preload should not be grater than $item.length\r\n        this.settings.preload = Math.min(this.settings.preload, this.galleryItems.length);\r\n    };\r\n    LightGallery.prototype.init = function () {\r\n        var _this = this;\r\n        this.addSlideVideoInfo(this.galleryItems);\r\n        this.buildStructure();\r\n        this.LGel.trigger(lGEvents.init, {\r\n            instance: this,\r\n        });\r\n        if (this.settings.keyPress) {\r\n            this.keyPress();\r\n        }\r\n        setTimeout(function () {\r\n            _this.enableDrag();\r\n            _this.enableSwipe();\r\n            _this.triggerPosterClick();\r\n        }, 50);\r\n        this.arrow();\r\n        if (this.settings.mousewheel) {\r\n            this.mousewheel();\r\n        }\r\n        if (!this.settings.dynamic) {\r\n            this.openGalleryOnItemClick();\r\n        }\r\n    };\r\n    LightGallery.prototype.openGalleryOnItemClick = function () {\r\n        var _this = this;\r\n        var _loop_1 = function (index) {\r\n            var element = this_1.items[index];\r\n            var $element = $LG(element);\r\n            // Using different namespace for click because click event should not unbind if selector is same object('this')\r\n            // @todo manage all event listners - should have namespace that represent element\r\n            var uuid = lgQuery.generateUUID();\r\n            $element\r\n                .attr('data-lg-id', uuid)\r\n                .on(\"click.lgcustom-item-\" + uuid, function (e) {\r\n                e.preventDefault();\r\n                var currentItemIndex = _this.settings.index || index;\r\n                _this.openGallery(currentItemIndex, element);\r\n            });\r\n        };\r\n        var this_1 = this;\r\n        // Using for loop instead of using bubbling as the items can be any html element.\r\n        for (var index = 0; index < this.items.length; index++) {\r\n            _loop_1(index);\r\n        }\r\n    };\r\n    /**\r\n     * Module constructor\r\n     * Modules are build incrementally.\r\n     * Gallery should be opened only once all the modules are initialized.\r\n     * use moduleBuildTimeout to make sure this\r\n     */\r\n    LightGallery.prototype.buildModules = function () {\r\n        var _this = this;\r\n        this.settings.plugins.forEach(function (plugin) {\r\n            _this.plugins.push(new plugin(_this, $LG));\r\n        });\r\n    };\r\n    LightGallery.prototype.validateLicense = function () {\r\n        if (!this.settings.licenseKey) {\r\n            console.error('Please provide a valid license key');\r\n        }\r\n        else if (this.settings.licenseKey === '0000-0000-000-0000') {\r\n            console.warn(\"lightGallery: \" + this.settings.licenseKey + \" license key is not valid for production use\");\r\n        }\r\n    };\r\n    LightGallery.prototype.getSlideItem = function (index) {\r\n        return $LG(this.getSlideItemId(index));\r\n    };\r\n    LightGallery.prototype.getSlideItemId = function (index) {\r\n        return \"#lg-item-\" + this.lgId + \"-\" + index;\r\n    };\r\n    LightGallery.prototype.getIdName = function (id) {\r\n        return id + \"-\" + this.lgId;\r\n    };\r\n    LightGallery.prototype.getElementById = function (id) {\r\n        return $LG(\"#\" + this.getIdName(id));\r\n    };\r\n    LightGallery.prototype.manageSingleSlideClassName = function () {\r\n        if (this.galleryItems.length < 2) {\r\n            this.outer.addClass('lg-single-item');\r\n        }\r\n        else {\r\n            this.outer.removeClass('lg-single-item');\r\n        }\r\n    };\r\n    LightGallery.prototype.buildStructure = function () {\r\n        var _this = this;\r\n        var container = this.$container && this.$container.get();\r\n        if (container) {\r\n            return;\r\n        }\r\n        var controls = '';\r\n        var subHtmlCont = '';\r\n        // Create controls\r\n        if (this.settings.controls) {\r\n            controls = \"<button type=\\\"button\\\" id=\\\"\" + this.getIdName('lg-prev') + \"\\\" aria-label=\\\"\" + this.settings.strings['previousSlide'] + \"\\\" class=\\\"lg-prev lg-icon\\\"> \" + this.settings.prevHtml + \" </button>\\n                <button type=\\\"button\\\" id=\\\"\" + this.getIdName('lg-next') + \"\\\" aria-label=\\\"\" + this.settings.strings['nextSlide'] + \"\\\" class=\\\"lg-next lg-icon\\\"> \" + this.settings.nextHtml + \" </button>\";\r\n        }\r\n        if (this.settings.appendSubHtmlTo !== '.lg-item') {\r\n            subHtmlCont =\r\n                '<div class=\"lg-sub-html\" role=\"status\" aria-live=\"polite\"></div>';\r\n        }\r\n        var addClasses = '';\r\n        if (this.settings.allowMediaOverlap) {\r\n            // Do not remove space before last single quote\r\n            addClasses += 'lg-media-overlap ';\r\n        }\r\n        var ariaLabelledby = this.settings.ariaLabelledby\r\n            ? 'aria-labelledby=\"' + this.settings.ariaLabelledby + '\"'\r\n            : '';\r\n        var ariaDescribedby = this.settings.ariaDescribedby\r\n            ? 'aria-describedby=\"' + this.settings.ariaDescribedby + '\"'\r\n            : '';\r\n        var containerClassName = \"lg-container \" + this.settings.addClass + \" \" + (document.body !== this.settings.container ? 'lg-inline' : '');\r\n        var closeIcon = this.settings.closable && this.settings.showCloseIcon\r\n            ? \"<button type=\\\"button\\\" aria-label=\\\"\" + this.settings.strings['closeGallery'] + \"\\\" id=\\\"\" + this.getIdName('lg-close') + \"\\\" class=\\\"lg-close lg-icon\\\"></button>\"\r\n            : '';\r\n        var maximizeIcon = this.settings.showMaximizeIcon\r\n            ? \"<button type=\\\"button\\\" aria-label=\\\"\" + this.settings.strings['toggleMaximize'] + \"\\\" id=\\\"\" + this.getIdName('lg-maximize') + \"\\\" class=\\\"lg-maximize lg-icon\\\"></button>\"\r\n            : '';\r\n        var template = \"\\n        <div class=\\\"\" + containerClassName + \"\\\" id=\\\"\" + this.getIdName('lg-container') + \"\\\" tabindex=\\\"-1\\\" aria-modal=\\\"true\\\" \" + ariaLabelledby + \" \" + ariaDescribedby + \" role=\\\"dialog\\\"\\n        >\\n            <div id=\\\"\" + this.getIdName('lg-backdrop') + \"\\\" class=\\\"lg-backdrop\\\"></div>\\n\\n            <div id=\\\"\" + this.getIdName('lg-outer') + \"\\\" class=\\\"lg-outer lg-use-css3 lg-css3 lg-hide-items \" + addClasses + \" \\\">\\n\\n              <div id=\\\"\" + this.getIdName('lg-content') + \"\\\" class=\\\"lg-content\\\">\\n                <div id=\\\"\" + this.getIdName('lg-inner') + \"\\\" class=\\\"lg-inner\\\">\\n                </div>\\n                \" + controls + \"\\n              </div>\\n                <div id=\\\"\" + this.getIdName('lg-toolbar') + \"\\\" class=\\\"lg-toolbar lg-group\\\">\\n                    \" + maximizeIcon + \"\\n                    \" + closeIcon + \"\\n                    </div>\\n                    \" + (this.settings.appendSubHtmlTo === '.lg-outer'\r\n            ? subHtmlCont\r\n            : '') + \"\\n                <div id=\\\"\" + this.getIdName('lg-components') + \"\\\" class=\\\"lg-components\\\">\\n                    \" + (this.settings.appendSubHtmlTo === '.lg-sub-html'\r\n            ? subHtmlCont\r\n            : '') + \"\\n                </div>\\n            </div>\\n        </div>\\n        \";\r\n        $LG(this.settings.container).append(template);\r\n        if (document.body !== this.settings.container) {\r\n            $LG(this.settings.container).css('position', 'relative');\r\n        }\r\n        this.outer = this.getElementById('lg-outer');\r\n        this.$lgComponents = this.getElementById('lg-components');\r\n        this.$backdrop = this.getElementById('lg-backdrop');\r\n        this.$container = this.getElementById('lg-container');\r\n        this.$inner = this.getElementById('lg-inner');\r\n        this.$content = this.getElementById('lg-content');\r\n        this.$toolbar = this.getElementById('lg-toolbar');\r\n        this.$backdrop.css('transition-duration', this.settings.backdropDuration + 'ms');\r\n        var outerClassNames = this.settings.mode + \" \";\r\n        this.manageSingleSlideClassName();\r\n        if (this.settings.enableDrag) {\r\n            outerClassNames += 'lg-grab ';\r\n        }\r\n        this.outer.addClass(outerClassNames);\r\n        this.$inner.css('transition-timing-function', this.settings.easing);\r\n        this.$inner.css('transition-duration', this.settings.speed + 'ms');\r\n        if (this.settings.download) {\r\n            this.$toolbar.append(\"<a id=\\\"\" + this.getIdName('lg-download') + \"\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\" aria-label=\\\"\" + this.settings.strings['download'] + \"\\\" download class=\\\"lg-download lg-icon\\\"></a>\");\r\n        }\r\n        this.counter();\r\n        $LG(window).on(\"resize.lg.global\" + this.lgId + \" orientationchange.lg.global\" + this.lgId, function () {\r\n            _this.refreshOnResize();\r\n        });\r\n        this.hideBars();\r\n        this.manageCloseGallery();\r\n        this.toggleMaximize();\r\n        this.initModules();\r\n    };\r\n    LightGallery.prototype.refreshOnResize = function () {\r\n        if (this.lgOpened) {\r\n            var currentGalleryItem = this.galleryItems[this.index];\r\n            var __slideVideoInfo = currentGalleryItem.__slideVideoInfo;\r\n            this.mediaContainerPosition = this.getMediaContainerPosition();\r\n            var _a = this.mediaContainerPosition, top_1 = _a.top, bottom = _a.bottom;\r\n            this.currentImageSize = utils.getSize(this.items[this.index], this.outer, top_1 + bottom, __slideVideoInfo && this.settings.videoMaxSize);\r\n            if (__slideVideoInfo) {\r\n                this.resizeVideoSlide(this.index, this.currentImageSize);\r\n            }\r\n            if (this.zoomFromOrigin && !this.isDummyImageRemoved) {\r\n                var imgStyle = this.getDummyImgStyles(this.currentImageSize);\r\n                this.outer\r\n                    .find('.lg-current .lg-dummy-img')\r\n                    .first()\r\n                    .attr('style', imgStyle);\r\n            }\r\n            this.LGel.trigger(lGEvents.containerResize);\r\n        }\r\n    };\r\n    LightGallery.prototype.resizeVideoSlide = function (index, imageSize) {\r\n        var lgVideoStyle = this.getVideoContStyle(imageSize);\r\n        var currentSlide = this.getSlideItem(index);\r\n        currentSlide.find('.lg-video-cont').attr('style', lgVideoStyle);\r\n    };\r\n    /**\r\n     * Update slides dynamically.\r\n     * Add, edit or delete slides dynamically when lightGallery is opened.\r\n     * Modify the current gallery items and pass it via updateSlides method\r\n     * @note\r\n     * - Do not mutate existing lightGallery items directly.\r\n     * - Always pass new list of gallery items\r\n     * - You need to take care of thumbnails outside the gallery if any\r\n     * - user this method only if you want to update slides when the gallery is opened. Otherwise, use `refresh()` method.\r\n     * @param items Gallery items\r\n     * @param index After the update operation, which slide gallery should navigate to\r\n     * @category lGPublicMethods\r\n     * @example\r\n     * const plugin = lightGallery();\r\n     *\r\n     * // Adding slides dynamically\r\n     * let galleryItems = [\r\n     * // Access existing lightGallery items\r\n     * // galleryItems are automatically generated internally from the gallery HTML markup\r\n     * // or directly from galleryItems when dynamic gallery is used\r\n     *   ...plugin.galleryItems,\r\n     *     ...[\r\n     *       {\r\n     *         src: 'img/img-1.png',\r\n     *           thumb: 'img/thumb1.png',\r\n     *         },\r\n     *     ],\r\n     *   ];\r\n     *   plugin.updateSlides(\r\n     *     galleryItems,\r\n     *     plugin.index,\r\n     *   );\r\n     *\r\n     *\r\n     * // Remove slides dynamically\r\n     * galleryItems = JSON.parse(\r\n     *   JSON.stringify(updateSlideInstance.galleryItems),\r\n     * );\r\n     * galleryItems.shift();\r\n     * updateSlideInstance.updateSlides(galleryItems, 1);\r\n     * @see <a href=\"/demos/update-slides/\">Demo</a>\r\n     */\r\n    LightGallery.prototype.updateSlides = function (items, index) {\r\n        if (this.index > items.length - 1) {\r\n            this.index = items.length - 1;\r\n        }\r\n        if (items.length === 1) {\r\n            this.index = 0;\r\n        }\r\n        if (!items.length) {\r\n            this.closeGallery();\r\n            return;\r\n        }\r\n        var currentSrc = this.galleryItems[index].src;\r\n        this.galleryItems = items;\r\n        this.updateControls();\r\n        this.$inner.empty();\r\n        this.currentItemsInDom = [];\r\n        var _index = 0;\r\n        // Find the current index based on source value of the slide\r\n        this.galleryItems.some(function (galleryItem, itemIndex) {\r\n            if (galleryItem.src === currentSrc) {\r\n                _index = itemIndex;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        this.currentItemsInDom = this.organizeSlideItems(_index, -1);\r\n        this.loadContent(_index, true);\r\n        this.getSlideItem(_index).addClass('lg-current');\r\n        this.index = _index;\r\n        this.updateCurrentCounter(_index);\r\n        this.LGel.trigger(lGEvents.updateSlides);\r\n    };\r\n    // Get gallery items based on multiple conditions\r\n    LightGallery.prototype.getItems = function () {\r\n        // Gallery items\r\n        this.items = [];\r\n        if (!this.settings.dynamic) {\r\n            if (this.settings.selector === 'this') {\r\n                this.items.push(this.el);\r\n            }\r\n            else if (this.settings.selector) {\r\n                if (typeof this.settings.selector === 'string') {\r\n                    if (this.settings.selectWithin) {\r\n                        var selectWithin = $LG(this.settings.selectWithin);\r\n                        this.items = selectWithin\r\n                            .find(this.settings.selector)\r\n                            .get();\r\n                    }\r\n                    else {\r\n                        this.items = this.el.querySelectorAll(this.settings.selector);\r\n                    }\r\n                }\r\n                else {\r\n                    this.items = this.settings.selector;\r\n                }\r\n            }\r\n            else {\r\n                this.items = this.el.children;\r\n            }\r\n            return utils.getDynamicOptions(this.items, this.settings.extraProps, this.settings.getCaptionFromTitleOrAlt, this.settings.exThumbImage);\r\n        }\r\n        else {\r\n            return this.settings.dynamicEl || [];\r\n        }\r\n    };\r\n    LightGallery.prototype.shouldHideScrollbar = function () {\r\n        return (this.settings.hideScrollbar &&\r\n            document.body === this.settings.container);\r\n    };\r\n    LightGallery.prototype.hideScrollbar = function () {\r\n        if (!this.shouldHideScrollbar()) {\r\n            return;\r\n        }\r\n        this.bodyPaddingRight = parseFloat($LG('body').style().paddingRight);\r\n        var bodyRect = document.documentElement.getBoundingClientRect();\r\n        var scrollbarWidth = window.innerWidth - bodyRect.width;\r\n        $LG(document.body).css('padding-right', scrollbarWidth + this.bodyPaddingRight + 'px');\r\n        $LG(document.body).addClass('lg-overlay-open');\r\n    };\r\n    LightGallery.prototype.resetScrollBar = function () {\r\n        if (!this.shouldHideScrollbar()) {\r\n            return;\r\n        }\r\n        $LG(document.body).css('padding-right', this.bodyPaddingRight + 'px');\r\n        $LG(document.body).removeClass('lg-overlay-open');\r\n    };\r\n    /**\r\n     * Open lightGallery.\r\n     * Open gallery with specific slide by passing index of the slide as parameter.\r\n     * @category lGPublicMethods\r\n     * @param {Number} index  - index of the slide\r\n     * @param {HTMLElement} element - Which image lightGallery should zoom from\r\n     *\r\n     * @example\r\n     * const $dynamicGallery = document.getElementById('dynamic-gallery-demo');\r\n     * const dynamicGallery = lightGallery($dynamicGallery, {\r\n     *     dynamic: true,\r\n     *     dynamicEl: [\r\n     *         {\r\n     *              src: 'img/1.jpg',\r\n     *              thumb: 'img/thumb-1.jpg',\r\n     *              subHtml: '<h4>Image 1 title</h4><p>Image 1 descriptions.</p>',\r\n     *         },\r\n     *         ...\r\n     *     ],\r\n     * });\r\n     * $dynamicGallery.addEventListener('click', function () {\r\n     *     // Starts with third item.(Optional).\r\n     *     // This is useful if you want use dynamic mode with\r\n     *     // custom thumbnails (thumbnails outside gallery),\r\n     *     dynamicGallery.openGallery(2);\r\n     * });\r\n     *\r\n     */\r\n    LightGallery.prototype.openGallery = function (index, element) {\r\n        var _this = this;\r\n        if (index === void 0) { index = this.settings.index; }\r\n        // prevent accidental double execution\r\n        if (this.lgOpened)\r\n            return;\r\n        this.lgOpened = true;\r\n        this.outer.removeClass('lg-hide-items');\r\n        this.hideScrollbar();\r\n        // Add display block, but still has opacity 0\r\n        this.$container.addClass('lg-show');\r\n        var itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(index, index);\r\n        this.currentItemsInDom = itemsToBeInsertedToDom;\r\n        var items = '';\r\n        itemsToBeInsertedToDom.forEach(function (item) {\r\n            items = items + (\"<div id=\\\"\" + item + \"\\\" class=\\\"lg-item\\\"></div>\");\r\n        });\r\n        this.$inner.append(items);\r\n        this.addHtml(index);\r\n        var transform = '';\r\n        this.mediaContainerPosition = this.getMediaContainerPosition();\r\n        var _a = this.mediaContainerPosition, top = _a.top, bottom = _a.bottom;\r\n        if (!this.settings.allowMediaOverlap) {\r\n            this.setMediaContainerPosition(top, bottom);\r\n        }\r\n        var __slideVideoInfo = this.galleryItems[index].__slideVideoInfo;\r\n        if (this.zoomFromOrigin && element) {\r\n            this.currentImageSize = utils.getSize(element, this.outer, top + bottom, __slideVideoInfo && this.settings.videoMaxSize);\r\n            transform = utils.getTransform(element, this.outer, top, bottom, this.currentImageSize);\r\n        }\r\n        if (!this.zoomFromOrigin || !transform) {\r\n            this.outer.addClass(this.settings.startClass);\r\n            this.getSlideItem(index).removeClass('lg-complete');\r\n        }\r\n        var timeout = this.settings.zoomFromOrigin\r\n            ? 100\r\n            : this.settings.backdropDuration;\r\n        setTimeout(function () {\r\n            _this.outer.addClass('lg-components-open');\r\n        }, timeout);\r\n        this.index = index;\r\n        this.LGel.trigger(lGEvents.beforeOpen);\r\n        // add class lg-current to remove initial transition\r\n        this.getSlideItem(index).addClass('lg-current');\r\n        this.lGalleryOn = false;\r\n        // Store the current scroll top value to scroll back after closing the gallery..\r\n        this.prevScrollTop = $LG(window).scrollTop();\r\n        setTimeout(function () {\r\n            // Need to check both zoomFromOrigin and transform values as we need to set set the\r\n            // default opening animation if user missed to add the lg-size attribute\r\n            if (_this.zoomFromOrigin && transform) {\r\n                var currentSlide_1 = _this.getSlideItem(index);\r\n                currentSlide_1.css('transform', transform);\r\n                setTimeout(function () {\r\n                    currentSlide_1\r\n                        .addClass('lg-start-progress lg-start-end-progress')\r\n                        .css('transition-duration', _this.settings.startAnimationDuration + 'ms');\r\n                    _this.outer.addClass('lg-zoom-from-image');\r\n                });\r\n                setTimeout(function () {\r\n                    currentSlide_1.css('transform', 'translate3d(0, 0, 0)');\r\n                }, 100);\r\n            }\r\n            setTimeout(function () {\r\n                _this.$backdrop.addClass('in');\r\n                _this.$container.addClass('lg-show-in');\r\n            }, 10);\r\n            setTimeout(function () {\r\n                if (_this.settings.trapFocus &&\r\n                    document.body === _this.settings.container) {\r\n                    _this.trapFocus();\r\n                }\r\n            }, _this.settings.backdropDuration + 50);\r\n            // lg-visible class resets gallery opacity to 1\r\n            if (!_this.zoomFromOrigin || !transform) {\r\n                setTimeout(function () {\r\n                    _this.outer.addClass('lg-visible');\r\n                }, _this.settings.backdropDuration);\r\n            }\r\n            // initiate slide function\r\n            _this.slide(index, false, false, false);\r\n            _this.LGel.trigger(lGEvents.afterOpen);\r\n        });\r\n        if (document.body === this.settings.container) {\r\n            $LG('html').addClass('lg-on');\r\n        }\r\n    };\r\n    /**\r\n     * Note - Changing the position of the media on every slide transition creates a flickering effect.\r\n     * Therefore, The height of the caption is calculated dynamically, only once based on the first slide caption.\r\n     * if you have dynamic captions for each media,\r\n     * you can provide an appropriate height for the captions via allowMediaOverlap option\r\n     */\r\n    LightGallery.prototype.getMediaContainerPosition = function () {\r\n        if (this.settings.allowMediaOverlap) {\r\n            return {\r\n                top: 0,\r\n                bottom: 0,\r\n            };\r\n        }\r\n        var top = this.$toolbar.get().clientHeight || 0;\r\n        var subHtml = this.outer.find('.lg-components .lg-sub-html').get();\r\n        var captionHeight = this.settings.defaultCaptionHeight ||\r\n            (subHtml && subHtml.clientHeight) ||\r\n            0;\r\n        var thumbContainer = this.outer.find('.lg-thumb-outer').get();\r\n        var thumbHeight = thumbContainer ? thumbContainer.clientHeight : 0;\r\n        var bottom = thumbHeight + captionHeight;\r\n        return {\r\n            top: top,\r\n            bottom: bottom,\r\n        };\r\n    };\r\n    LightGallery.prototype.setMediaContainerPosition = function (top, bottom) {\r\n        if (top === void 0) { top = 0; }\r\n        if (bottom === void 0) { bottom = 0; }\r\n        this.$content.css('top', top + 'px').css('bottom', bottom + 'px');\r\n    };\r\n    LightGallery.prototype.hideBars = function () {\r\n        var _this = this;\r\n        // Hide controllers if mouse doesn't move for some period\r\n        setTimeout(function () {\r\n            _this.outer.removeClass('lg-hide-items');\r\n            if (_this.settings.hideBarsDelay > 0) {\r\n                _this.outer.on('mousemove.lg click.lg touchstart.lg', function () {\r\n                    _this.outer.removeClass('lg-hide-items');\r\n                    clearTimeout(_this.hideBarTimeout);\r\n                    // Timeout will be cleared on each slide movement also\r\n                    _this.hideBarTimeout = setTimeout(function () {\r\n                        _this.outer.addClass('lg-hide-items');\r\n                    }, _this.settings.hideBarsDelay);\r\n                });\r\n                _this.outer.trigger('mousemove.lg');\r\n            }\r\n        }, this.settings.showBarsAfter);\r\n    };\r\n    LightGallery.prototype.initPictureFill = function ($img) {\r\n        if (this.settings.supportLegacyBrowser) {\r\n            try {\r\n                picturefill({\r\n                    elements: [$img.get()],\r\n                });\r\n            }\r\n            catch (e) {\r\n                console.warn('lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *  @desc Create image counter\r\n     *  Ex: 1/10\r\n     */\r\n    LightGallery.prototype.counter = function () {\r\n        if (this.settings.counter) {\r\n            var counterHtml = \"<div class=\\\"lg-counter\\\" role=\\\"status\\\" aria-live=\\\"polite\\\">\\n                <span id=\\\"\" + this.getIdName('lg-counter-current') + \"\\\" class=\\\"lg-counter-current\\\">\" + (this.index + 1) + \" </span> /\\n                <span id=\\\"\" + this.getIdName('lg-counter-all') + \"\\\" class=\\\"lg-counter-all\\\">\" + this.galleryItems.length + \" </span></div>\";\r\n            this.outer.find(this.settings.appendCounterTo).append(counterHtml);\r\n        }\r\n    };\r\n    /**\r\n     *  @desc add sub-html into the slide\r\n     *  @param {Number} index - index of the slide\r\n     */\r\n    LightGallery.prototype.addHtml = function (index) {\r\n        var subHtml;\r\n        var subHtmlUrl;\r\n        if (this.galleryItems[index].subHtmlUrl) {\r\n            subHtmlUrl = this.galleryItems[index].subHtmlUrl;\r\n        }\r\n        else {\r\n            subHtml = this.galleryItems[index].subHtml;\r\n        }\r\n        if (!subHtmlUrl) {\r\n            if (subHtml) {\r\n                // get first letter of sub-html\r\n                // if first letter starts with . or # get the html form the jQuery object\r\n                var fL = subHtml.substring(0, 1);\r\n                if (fL === '.' || fL === '#') {\r\n                    if (this.settings.subHtmlSelectorRelative &&\r\n                        !this.settings.dynamic) {\r\n                        subHtml = $LG(this.items)\r\n                            .eq(index)\r\n                            .find(subHtml)\r\n                            .first()\r\n                            .html();\r\n                    }\r\n                    else {\r\n                        subHtml = $LG(subHtml).first().html();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                subHtml = '';\r\n            }\r\n        }\r\n        if (this.settings.appendSubHtmlTo !== '.lg-item') {\r\n            if (subHtmlUrl) {\r\n                utils.fetchCaptionFromUrl(subHtmlUrl, this.outer.find('.lg-sub-html'), 'replace');\r\n            }\r\n            else {\r\n                this.outer.find('.lg-sub-html').html(subHtml);\r\n            }\r\n        }\r\n        else {\r\n            var currentSlide = $LG(this.getSlideItemId(index));\r\n            if (subHtmlUrl) {\r\n                utils.fetchCaptionFromUrl(subHtmlUrl, currentSlide, 'append');\r\n            }\r\n            else {\r\n                currentSlide.append(\"<div class=\\\"lg-sub-html\\\">\" + subHtml + \"</div>\");\r\n            }\r\n        }\r\n        // Add lg-empty-html class if title doesn't exist\r\n        if (typeof subHtml !== 'undefined' && subHtml !== null) {\r\n            if (subHtml === '') {\r\n                this.outer\r\n                    .find(this.settings.appendSubHtmlTo)\r\n                    .addClass('lg-empty-html');\r\n            }\r\n            else {\r\n                this.outer\r\n                    .find(this.settings.appendSubHtmlTo)\r\n                    .removeClass('lg-empty-html');\r\n            }\r\n        }\r\n        this.LGel.trigger(lGEvents.afterAppendSubHtml, {\r\n            index: index,\r\n        });\r\n    };\r\n    /**\r\n     *  @desc Preload slides\r\n     *  @param {Number} index - index of the slide\r\n     * @todo preload not working for the first slide, Also, should work for the first and last slide as well\r\n     */\r\n    LightGallery.prototype.preload = function (index) {\r\n        for (var i = 1; i <= this.settings.preload; i++) {\r\n            if (i >= this.galleryItems.length - index) {\r\n                break;\r\n            }\r\n            this.loadContent(index + i, false);\r\n        }\r\n        for (var j = 1; j <= this.settings.preload; j++) {\r\n            if (index - j < 0) {\r\n                break;\r\n            }\r\n            this.loadContent(index - j, false);\r\n        }\r\n    };\r\n    LightGallery.prototype.getDummyImgStyles = function (imageSize) {\r\n        if (!imageSize)\r\n            return '';\r\n        return \"width:\" + imageSize.width + \"px;\\n                margin-left: -\" + imageSize.width / 2 + \"px;\\n                margin-top: -\" + imageSize.height / 2 + \"px;\\n                height:\" + imageSize.height + \"px\";\r\n    };\r\n    LightGallery.prototype.getVideoContStyle = function (imageSize) {\r\n        if (!imageSize)\r\n            return '';\r\n        return \"width:\" + imageSize.width + \"px;\\n                height:\" + imageSize.height + \"px\";\r\n    };\r\n    LightGallery.prototype.getDummyImageContent = function ($currentSlide, index, alt) {\r\n        var $currentItem;\r\n        if (!this.settings.dynamic) {\r\n            $currentItem = $LG(this.items).eq(index);\r\n        }\r\n        if ($currentItem) {\r\n            var _dummyImgSrc = void 0;\r\n            if (!this.settings.exThumbImage) {\r\n                _dummyImgSrc = $currentItem.find('img').first().attr('src');\r\n            }\r\n            else {\r\n                _dummyImgSrc = $currentItem.attr(this.settings.exThumbImage);\r\n            }\r\n            if (!_dummyImgSrc)\r\n                return '';\r\n            var imgStyle = this.getDummyImgStyles(this.currentImageSize);\r\n            var dummyImgContentImg = document.createElement('img');\r\n            dummyImgContentImg.alt = alt || '';\r\n            dummyImgContentImg.src = _dummyImgSrc;\r\n            dummyImgContentImg.className = \"lg-dummy-img\";\r\n            dummyImgContentImg.style.cssText = imgStyle;\r\n            $currentSlide.addClass('lg-first-slide');\r\n            this.outer.addClass('lg-first-slide-loading');\r\n            return dummyImgContentImg;\r\n        }\r\n        return '';\r\n    };\r\n    LightGallery.prototype.setImgMarkup = function (src, $currentSlide, index) {\r\n        var currentGalleryItem = this.galleryItems[index];\r\n        var alt = currentGalleryItem.alt, srcset = currentGalleryItem.srcset, sizes = currentGalleryItem.sizes, sources = currentGalleryItem.sources;\r\n        // Use the thumbnail as dummy image which will be resized to actual image size and\r\n        // displayed on top of actual image\r\n        var imgContent = '';\r\n        var altAttr = alt ? 'alt=\"' + alt + '\"' : '';\r\n        if (this.isFirstSlideWithZoomAnimation()) {\r\n            imgContent = this.getDummyImageContent($currentSlide, index, altAttr);\r\n        }\r\n        else {\r\n            imgContent = utils.getImgMarkup(index, src, altAttr, srcset, sizes, sources);\r\n        }\r\n        var picture = document.createElement('picture');\r\n        picture.className = 'lg-img-wrap';\r\n        $LG(picture).append(imgContent);\r\n        $currentSlide.prepend(picture);\r\n    };\r\n    LightGallery.prototype.onSlideObjectLoad = function ($slide, isHTML5VideoWithoutPoster, onLoad, onError) {\r\n        var mediaObject = $slide.find('.lg-object').first();\r\n        if (utils.isImageLoaded(mediaObject.get()) ||\r\n            isHTML5VideoWithoutPoster) {\r\n            onLoad();\r\n        }\r\n        else {\r\n            mediaObject.on('load.lg error.lg', function () {\r\n                onLoad && onLoad();\r\n            });\r\n            mediaObject.on('error.lg', function () {\r\n                onError && onError();\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param $el Current slide item\r\n     * @param index\r\n     * @param delay Delay is 0 except first time\r\n     * @param speed Speed is same as delay, except it is 0 if gallery is opened via hash plugin\r\n     * @param isFirstSlide\r\n     */\r\n    LightGallery.prototype.onLgObjectLoad = function (currentSlide, index, delay, speed, isFirstSlide, isHTML5VideoWithoutPoster) {\r\n        var _this = this;\r\n        this.onSlideObjectLoad(currentSlide, isHTML5VideoWithoutPoster, function () {\r\n            _this.triggerSlideItemLoad(currentSlide, index, delay, speed, isFirstSlide);\r\n        }, function () {\r\n            currentSlide.addClass('lg-complete lg-complete_');\r\n            currentSlide.html('<span class=\"lg-error-msg\">' +\r\n                _this.settings.strings['mediaLoadingFailed'] +\r\n                '</span>');\r\n        });\r\n    };\r\n    LightGallery.prototype.triggerSlideItemLoad = function ($currentSlide, index, delay, speed, isFirstSlide) {\r\n        var _this = this;\r\n        var currentGalleryItem = this.galleryItems[index];\r\n        // Adding delay for video slides without poster for better performance and user experience\r\n        // Videos should start playing once once the gallery is completely loaded\r\n        var _speed = isFirstSlide &&\r\n            this.getSlideType(currentGalleryItem) === 'video' &&\r\n            !currentGalleryItem.poster\r\n            ? speed\r\n            : 0;\r\n        setTimeout(function () {\r\n            $currentSlide.addClass('lg-complete lg-complete_');\r\n            _this.LGel.trigger(lGEvents.slideItemLoad, {\r\n                index: index,\r\n                delay: delay || 0,\r\n                isFirstSlide: isFirstSlide,\r\n            });\r\n        }, _speed);\r\n    };\r\n    LightGallery.prototype.isFirstSlideWithZoomAnimation = function () {\r\n        return !!(!this.lGalleryOn &&\r\n            this.zoomFromOrigin &&\r\n            this.currentImageSize);\r\n    };\r\n    // Add video slideInfo\r\n    LightGallery.prototype.addSlideVideoInfo = function (items) {\r\n        var _this = this;\r\n        items.forEach(function (element, index) {\r\n            element.__slideVideoInfo = utils.isVideo(element.src, !!element.video, index);\r\n            if (element.__slideVideoInfo &&\r\n                _this.settings.loadYouTubePoster &&\r\n                !element.poster &&\r\n                element.__slideVideoInfo.youtube) {\r\n                element.poster = \"//img.youtube.com/vi/\" + element.__slideVideoInfo.youtube[1] + \"/maxresdefault.jpg\";\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     *  Load slide content into slide.\r\n     *  This is used to load content into slides that is not visible too\r\n     *  @param {Number} index - index of the slide.\r\n     *  @param {Boolean} rec - if true call loadcontent() function again.\r\n     */\r\n    LightGallery.prototype.loadContent = function (index, rec) {\r\n        var _this = this;\r\n        var currentGalleryItem = this.galleryItems[index];\r\n        var $currentSlide = $LG(this.getSlideItemId(index));\r\n        var poster = currentGalleryItem.poster, srcset = currentGalleryItem.srcset, sizes = currentGalleryItem.sizes, sources = currentGalleryItem.sources;\r\n        var src = currentGalleryItem.src;\r\n        var video = currentGalleryItem.video;\r\n        var _html5Video = video && typeof video === 'string' ? JSON.parse(video) : video;\r\n        if (currentGalleryItem.responsive) {\r\n            var srcDyItms = currentGalleryItem.responsive.split(',');\r\n            src = utils.getResponsiveSrc(srcDyItms) || src;\r\n        }\r\n        var videoInfo = currentGalleryItem.__slideVideoInfo;\r\n        var lgVideoStyle = '';\r\n        var iframe = !!currentGalleryItem.iframe;\r\n        var isFirstSlide = !this.lGalleryOn;\r\n        // delay for adding complete class. it is 0 except first time.\r\n        var delay = 0;\r\n        if (isFirstSlide) {\r\n            if (this.zoomFromOrigin && this.currentImageSize) {\r\n                delay = this.settings.startAnimationDuration + 10;\r\n            }\r\n            else {\r\n                delay = this.settings.backdropDuration + 10;\r\n            }\r\n        }\r\n        if (!$currentSlide.hasClass('lg-loaded')) {\r\n            if (videoInfo) {\r\n                var _a = this.mediaContainerPosition, top_2 = _a.top, bottom = _a.bottom;\r\n                var videoSize = utils.getSize(this.items[index], this.outer, top_2 + bottom, videoInfo && this.settings.videoMaxSize);\r\n                lgVideoStyle = this.getVideoContStyle(videoSize);\r\n            }\r\n            if (iframe) {\r\n                var markup = utils.getIframeMarkup(this.settings.iframeWidth, this.settings.iframeHeight, this.settings.iframeMaxWidth, this.settings.iframeMaxHeight, src, currentGalleryItem.iframeTitle);\r\n                $currentSlide.prepend(markup);\r\n            }\r\n            else if (poster) {\r\n                var dummyImg = '';\r\n                var hasStartAnimation = isFirstSlide &&\r\n                    this.zoomFromOrigin &&\r\n                    this.currentImageSize;\r\n                if (hasStartAnimation) {\r\n                    dummyImg = this.getDummyImageContent($currentSlide, index, '');\r\n                }\r\n                var markup = utils.getVideoPosterMarkup(poster, dummyImg || '', lgVideoStyle, this.settings.strings['playVideo'], videoInfo);\r\n                $currentSlide.prepend(markup);\r\n            }\r\n            else if (videoInfo) {\r\n                var markup = \"<div class=\\\"lg-video-cont \\\" style=\\\"\" + lgVideoStyle + \"\\\"></div>\";\r\n                $currentSlide.prepend(markup);\r\n            }\r\n            else {\r\n                this.setImgMarkup(src, $currentSlide, index);\r\n                if (srcset || sources) {\r\n                    var $img = $currentSlide.find('.lg-object');\r\n                    this.initPictureFill($img);\r\n                }\r\n            }\r\n            if (poster || videoInfo) {\r\n                this.LGel.trigger(lGEvents.hasVideo, {\r\n                    index: index,\r\n                    src: src,\r\n                    html5Video: _html5Video,\r\n                    hasPoster: !!poster,\r\n                });\r\n            }\r\n            this.LGel.trigger(lGEvents.afterAppendSlide, { index: index });\r\n            if (this.lGalleryOn &&\r\n                this.settings.appendSubHtmlTo === '.lg-item') {\r\n                this.addHtml(index);\r\n            }\r\n        }\r\n        // For first time add some delay for displaying the start animation.\r\n        var _speed = 0;\r\n        // Do not change the delay value because it is required for zoom plugin.\r\n        // If gallery opened from direct url (hash) speed value should be 0\r\n        if (delay && !$LG(document.body).hasClass('lg-from-hash')) {\r\n            _speed = delay;\r\n        }\r\n        // Only for first slide and zoomFromOrigin is enabled\r\n        if (this.isFirstSlideWithZoomAnimation()) {\r\n            setTimeout(function () {\r\n                $currentSlide\r\n                    .removeClass('lg-start-end-progress lg-start-progress')\r\n                    .removeAttr('style');\r\n            }, this.settings.startAnimationDuration + 100);\r\n            if (!$currentSlide.hasClass('lg-loaded')) {\r\n                setTimeout(function () {\r\n                    if (_this.getSlideType(currentGalleryItem) === 'image') {\r\n                        var alt = currentGalleryItem.alt;\r\n                        var altAttr = alt ? 'alt=\"' + alt + '\"' : '';\r\n                        $currentSlide\r\n                            .find('.lg-img-wrap')\r\n                            .append(utils.getImgMarkup(index, src, altAttr, srcset, sizes, currentGalleryItem.sources));\r\n                        if (srcset || sources) {\r\n                            var $img = $currentSlide.find('.lg-object');\r\n                            _this.initPictureFill($img);\r\n                        }\r\n                    }\r\n                    if (_this.getSlideType(currentGalleryItem) === 'image' ||\r\n                        (_this.getSlideType(currentGalleryItem) === 'video' &&\r\n                            poster)) {\r\n                        _this.onLgObjectLoad($currentSlide, index, delay, _speed, true, false);\r\n                        // load remaining slides once the slide is completely loaded\r\n                        _this.onSlideObjectLoad($currentSlide, !!(videoInfo && videoInfo.html5 && !poster), function () {\r\n                            _this.loadContentOnFirstSlideLoad(index, $currentSlide, _speed);\r\n                        }, function () {\r\n                            _this.loadContentOnFirstSlideLoad(index, $currentSlide, _speed);\r\n                        });\r\n                    }\r\n                }, this.settings.startAnimationDuration + 100);\r\n            }\r\n        }\r\n        // SLide content has been added to dom\r\n        $currentSlide.addClass('lg-loaded');\r\n        if (!this.isFirstSlideWithZoomAnimation() ||\r\n            (this.getSlideType(currentGalleryItem) === 'video' && !poster)) {\r\n            this.onLgObjectLoad($currentSlide, index, delay, _speed, isFirstSlide, !!(videoInfo && videoInfo.html5 && !poster));\r\n        }\r\n        // When gallery is opened once content is loaded (second time) need to add lg-complete class for css styling\r\n        if ((!this.zoomFromOrigin || !this.currentImageSize) &&\r\n            $currentSlide.hasClass('lg-complete_') &&\r\n            !this.lGalleryOn) {\r\n            setTimeout(function () {\r\n                $currentSlide.addClass('lg-complete');\r\n            }, this.settings.backdropDuration);\r\n        }\r\n        // Content loaded\r\n        // Need to set lGalleryOn before calling preload function\r\n        this.lGalleryOn = true;\r\n        if (rec === true) {\r\n            if (!$currentSlide.hasClass('lg-complete_')) {\r\n                $currentSlide\r\n                    .find('.lg-object')\r\n                    .first()\r\n                    .on('load.lg error.lg', function () {\r\n                    _this.preload(index);\r\n                });\r\n            }\r\n            else {\r\n                this.preload(index);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @desc Remove dummy image content and load next slides\r\n     * Called only for the first time if zoomFromOrigin animation is enabled\r\n     * @param index\r\n     * @param $currentSlide\r\n     * @param speed\r\n     */\r\n    LightGallery.prototype.loadContentOnFirstSlideLoad = function (index, $currentSlide, speed) {\r\n        var _this = this;\r\n        setTimeout(function () {\r\n            $currentSlide.find('.lg-dummy-img').remove();\r\n            $currentSlide.removeClass('lg-first-slide');\r\n            _this.outer.removeClass('lg-first-slide-loading');\r\n            _this.isDummyImageRemoved = true;\r\n            _this.preload(index);\r\n        }, speed + 300);\r\n    };\r\n    LightGallery.prototype.getItemsToBeInsertedToDom = function (index, prevIndex, numberOfItems) {\r\n        var _this = this;\r\n        if (numberOfItems === void 0) { numberOfItems = 0; }\r\n        var itemsToBeInsertedToDom = [];\r\n        // Minimum 2 items should be there\r\n        var possibleNumberOfItems = Math.max(numberOfItems, 3);\r\n        possibleNumberOfItems = Math.min(possibleNumberOfItems, this.galleryItems.length);\r\n        var prevIndexItem = \"lg-item-\" + this.lgId + \"-\" + prevIndex;\r\n        if (this.galleryItems.length <= 3) {\r\n            this.galleryItems.forEach(function (_element, index) {\r\n                itemsToBeInsertedToDom.push(\"lg-item-\" + _this.lgId + \"-\" + index);\r\n            });\r\n            return itemsToBeInsertedToDom;\r\n        }\r\n        if (index < (this.galleryItems.length - 1) / 2) {\r\n            for (var idx = index; idx > index - possibleNumberOfItems / 2 && idx >= 0; idx--) {\r\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + idx);\r\n            }\r\n            var numberOfExistingItems = itemsToBeInsertedToDom.length;\r\n            for (var idx = 0; idx < possibleNumberOfItems - numberOfExistingItems; idx++) {\r\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + (index + idx + 1));\r\n            }\r\n        }\r\n        else {\r\n            for (var idx = index; idx <= this.galleryItems.length - 1 &&\r\n                idx < index + possibleNumberOfItems / 2; idx++) {\r\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + idx);\r\n            }\r\n            var numberOfExistingItems = itemsToBeInsertedToDom.length;\r\n            for (var idx = 0; idx < possibleNumberOfItems - numberOfExistingItems; idx++) {\r\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + (index - idx - 1));\r\n            }\r\n        }\r\n        if (this.settings.loop) {\r\n            if (index === this.galleryItems.length - 1) {\r\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + 0);\r\n            }\r\n            else if (index === 0) {\r\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + (this.galleryItems.length - 1));\r\n            }\r\n        }\r\n        if (itemsToBeInsertedToDom.indexOf(prevIndexItem) === -1) {\r\n            itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + prevIndex);\r\n        }\r\n        return itemsToBeInsertedToDom;\r\n    };\r\n    LightGallery.prototype.organizeSlideItems = function (index, prevIndex) {\r\n        var _this = this;\r\n        var itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(index, prevIndex, this.settings.numberOfSlideItemsInDom);\r\n        itemsToBeInsertedToDom.forEach(function (item) {\r\n            if (_this.currentItemsInDom.indexOf(item) === -1) {\r\n                _this.$inner.append(\"<div id=\\\"\" + item + \"\\\" class=\\\"lg-item\\\"></div>\");\r\n            }\r\n        });\r\n        this.currentItemsInDom.forEach(function (item) {\r\n            if (itemsToBeInsertedToDom.indexOf(item) === -1) {\r\n                $LG(\"#\" + item).remove();\r\n            }\r\n        });\r\n        return itemsToBeInsertedToDom;\r\n    };\r\n    /**\r\n     * Get previous index of the slide\r\n     */\r\n    LightGallery.prototype.getPreviousSlideIndex = function () {\r\n        var prevIndex = 0;\r\n        try {\r\n            var currentItemId = this.outer\r\n                .find('.lg-current')\r\n                .first()\r\n                .attr('id');\r\n            prevIndex = parseInt(currentItemId.split('-')[3]) || 0;\r\n        }\r\n        catch (error) {\r\n            prevIndex = 0;\r\n        }\r\n        return prevIndex;\r\n    };\r\n    LightGallery.prototype.setDownloadValue = function (index) {\r\n        if (this.settings.download) {\r\n            var currentGalleryItem = this.galleryItems[index];\r\n            var hideDownloadBtn = currentGalleryItem.downloadUrl === false ||\r\n                currentGalleryItem.downloadUrl === 'false';\r\n            if (hideDownloadBtn) {\r\n                this.outer.addClass('lg-hide-download');\r\n            }\r\n            else {\r\n                var $download = this.getElementById('lg-download');\r\n                this.outer.removeClass('lg-hide-download');\r\n                $download.attr('href', currentGalleryItem.downloadUrl ||\r\n                    currentGalleryItem.src);\r\n                if (currentGalleryItem.download) {\r\n                    $download.attr('download', currentGalleryItem.download);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    LightGallery.prototype.makeSlideAnimation = function (direction, currentSlideItem, previousSlideItem) {\r\n        var _this = this;\r\n        if (this.lGalleryOn) {\r\n            previousSlideItem.addClass('lg-slide-progress');\r\n        }\r\n        setTimeout(function () {\r\n            // remove all transitions\r\n            _this.outer.addClass('lg-no-trans');\r\n            _this.outer\r\n                .find('.lg-item')\r\n                .removeClass('lg-prev-slide lg-next-slide');\r\n            if (direction === 'prev') {\r\n                //prevslide\r\n                currentSlideItem.addClass('lg-prev-slide');\r\n                previousSlideItem.addClass('lg-next-slide');\r\n            }\r\n            else {\r\n                // next slide\r\n                currentSlideItem.addClass('lg-next-slide');\r\n                previousSlideItem.addClass('lg-prev-slide');\r\n            }\r\n            // give 50 ms for browser to add/remove class\r\n            setTimeout(function () {\r\n                _this.outer.find('.lg-item').removeClass('lg-current');\r\n                currentSlideItem.addClass('lg-current');\r\n                // reset all transitions\r\n                _this.outer.removeClass('lg-no-trans');\r\n            }, 50);\r\n        }, this.lGalleryOn ? this.settings.slideDelay : 0);\r\n    };\r\n    /**\r\n     * Goto a specific slide.\r\n     * @param {Number} index - index of the slide\r\n     * @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag\r\n     * @param {Boolean} fromThumb - true if slide function called via thumbnail click\r\n     * @param {String} direction - Direction of the slide(next/prev)\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  // to go to 3rd slide\r\n     *  plugin.slide(2);\r\n     *\r\n     */\r\n    LightGallery.prototype.slide = function (index, fromTouch, fromThumb, direction) {\r\n        var _this = this;\r\n        var prevIndex = this.getPreviousSlideIndex();\r\n        this.currentItemsInDom = this.organizeSlideItems(index, prevIndex);\r\n        // Prevent multiple call, Required for hsh plugin\r\n        if (this.lGalleryOn && prevIndex === index) {\r\n            return;\r\n        }\r\n        var numberOfGalleryItems = this.galleryItems.length;\r\n        if (!this.lgBusy) {\r\n            if (this.settings.counter) {\r\n                this.updateCurrentCounter(index);\r\n            }\r\n            var currentSlideItem = this.getSlideItem(index);\r\n            var previousSlideItem_1 = this.getSlideItem(prevIndex);\r\n            var currentGalleryItem = this.galleryItems[index];\r\n            var videoInfo = currentGalleryItem.__slideVideoInfo;\r\n            this.outer.attr('data-lg-slide-type', this.getSlideType(currentGalleryItem));\r\n            this.setDownloadValue(index);\r\n            if (videoInfo) {\r\n                var _a = this.mediaContainerPosition, top_3 = _a.top, bottom = _a.bottom;\r\n                var videoSize = utils.getSize(this.items[index], this.outer, top_3 + bottom, videoInfo && this.settings.videoMaxSize);\r\n                this.resizeVideoSlide(index, videoSize);\r\n            }\r\n            this.LGel.trigger(lGEvents.beforeSlide, {\r\n                prevIndex: prevIndex,\r\n                index: index,\r\n                fromTouch: !!fromTouch,\r\n                fromThumb: !!fromThumb,\r\n            });\r\n            this.lgBusy = true;\r\n            clearTimeout(this.hideBarTimeout);\r\n            this.arrowDisable(index);\r\n            if (!direction) {\r\n                if (index < prevIndex) {\r\n                    direction = 'prev';\r\n                }\r\n                else if (index > prevIndex) {\r\n                    direction = 'next';\r\n                }\r\n            }\r\n            if (!fromTouch) {\r\n                this.makeSlideAnimation(direction, currentSlideItem, previousSlideItem_1);\r\n            }\r\n            else {\r\n                this.outer\r\n                    .find('.lg-item')\r\n                    .removeClass('lg-prev-slide lg-current lg-next-slide');\r\n                var touchPrev = void 0;\r\n                var touchNext = void 0;\r\n                if (numberOfGalleryItems > 2) {\r\n                    touchPrev = index - 1;\r\n                    touchNext = index + 1;\r\n                    if (index === 0 && prevIndex === numberOfGalleryItems - 1) {\r\n                        // next slide\r\n                        touchNext = 0;\r\n                        touchPrev = numberOfGalleryItems - 1;\r\n                    }\r\n                    else if (index === numberOfGalleryItems - 1 &&\r\n                        prevIndex === 0) {\r\n                        // prev slide\r\n                        touchNext = 0;\r\n                        touchPrev = numberOfGalleryItems - 1;\r\n                    }\r\n                }\r\n                else {\r\n                    touchPrev = 0;\r\n                    touchNext = 1;\r\n                }\r\n                if (direction === 'prev') {\r\n                    this.getSlideItem(touchNext).addClass('lg-next-slide');\r\n                }\r\n                else {\r\n                    this.getSlideItem(touchPrev).addClass('lg-prev-slide');\r\n                }\r\n                currentSlideItem.addClass('lg-current');\r\n            }\r\n            // Do not put load content in set timeout as it needs to load immediately when the gallery is opened\r\n            if (!this.lGalleryOn) {\r\n                this.loadContent(index, true);\r\n            }\r\n            else {\r\n                setTimeout(function () {\r\n                    _this.loadContent(index, true);\r\n                    // Add title if this.settings.appendSubHtmlTo === lg-sub-html\r\n                    if (_this.settings.appendSubHtmlTo !== '.lg-item') {\r\n                        _this.addHtml(index);\r\n                    }\r\n                }, this.settings.speed + 50 + (fromTouch ? 0 : this.settings.slideDelay));\r\n            }\r\n            setTimeout(function () {\r\n                _this.lgBusy = false;\r\n                previousSlideItem_1.removeClass('lg-slide-progress');\r\n                _this.LGel.trigger(lGEvents.afterSlide, {\r\n                    prevIndex: prevIndex,\r\n                    index: index,\r\n                    fromTouch: fromTouch,\r\n                    fromThumb: fromThumb,\r\n                });\r\n            }, (this.lGalleryOn ? this.settings.speed + 100 : 100) + (fromTouch ? 0 : this.settings.slideDelay));\r\n        }\r\n        this.index = index;\r\n    };\r\n    LightGallery.prototype.updateCurrentCounter = function (index) {\r\n        this.getElementById('lg-counter-current').html(index + 1 + '');\r\n    };\r\n    LightGallery.prototype.updateCounterTotal = function () {\r\n        this.getElementById('lg-counter-all').html(this.galleryItems.length + '');\r\n    };\r\n    LightGallery.prototype.getSlideType = function (item) {\r\n        if (item.__slideVideoInfo) {\r\n            return 'video';\r\n        }\r\n        else if (item.iframe) {\r\n            return 'iframe';\r\n        }\r\n        else {\r\n            return 'image';\r\n        }\r\n    };\r\n    LightGallery.prototype.touchMove = function (startCoords, endCoords, e) {\r\n        var distanceX = endCoords.pageX - startCoords.pageX;\r\n        var distanceY = endCoords.pageY - startCoords.pageY;\r\n        var allowSwipe = false;\r\n        if (this.swipeDirection) {\r\n            allowSwipe = true;\r\n        }\r\n        else {\r\n            if (Math.abs(distanceX) > 15) {\r\n                this.swipeDirection = 'horizontal';\r\n                allowSwipe = true;\r\n            }\r\n            else if (Math.abs(distanceY) > 15) {\r\n                this.swipeDirection = 'vertical';\r\n                allowSwipe = true;\r\n            }\r\n        }\r\n        if (!allowSwipe) {\r\n            return;\r\n        }\r\n        var $currentSlide = this.getSlideItem(this.index);\r\n        if (this.swipeDirection === 'horizontal') {\r\n            e === null || e === void 0 ? void 0 : e.preventDefault();\r\n            // reset opacity and transition duration\r\n            this.outer.addClass('lg-dragging');\r\n            // move current slide\r\n            this.setTranslate($currentSlide, distanceX, 0);\r\n            // move next and prev slide with current slide\r\n            var width = $currentSlide.get().offsetWidth;\r\n            var slideWidthAmount = (width * 15) / 100;\r\n            var gutter = slideWidthAmount - Math.abs((distanceX * 10) / 100);\r\n            this.setTranslate(this.outer.find('.lg-prev-slide').first(), -width + distanceX - gutter, 0);\r\n            this.setTranslate(this.outer.find('.lg-next-slide').first(), width + distanceX + gutter, 0);\r\n        }\r\n        else if (this.swipeDirection === 'vertical') {\r\n            if (this.settings.swipeToClose) {\r\n                e === null || e === void 0 ? void 0 : e.preventDefault();\r\n                this.$container.addClass('lg-dragging-vertical');\r\n                var opacity = 1 - Math.abs(distanceY) / window.innerHeight;\r\n                this.$backdrop.css('opacity', opacity);\r\n                var scale = 1 - Math.abs(distanceY) / (window.innerWidth * 2);\r\n                this.setTranslate($currentSlide, 0, distanceY, scale, scale);\r\n                if (Math.abs(distanceY) > 100) {\r\n                    this.outer\r\n                        .addClass('lg-hide-items')\r\n                        .removeClass('lg-components-open');\r\n                }\r\n            }\r\n        }\r\n    };\r\n    LightGallery.prototype.touchEnd = function (endCoords, startCoords, event) {\r\n        var _this = this;\r\n        var distance;\r\n        // keep slide animation for any mode while dragg/swipe\r\n        if (this.settings.mode !== 'lg-slide') {\r\n            this.outer.addClass('lg-slide');\r\n        }\r\n        // set transition duration\r\n        setTimeout(function () {\r\n            _this.$container.removeClass('lg-dragging-vertical');\r\n            _this.outer\r\n                .removeClass('lg-dragging lg-hide-items')\r\n                .addClass('lg-components-open');\r\n            var triggerClick = true;\r\n            if (_this.swipeDirection === 'horizontal') {\r\n                distance = endCoords.pageX - startCoords.pageX;\r\n                var distanceAbs = Math.abs(endCoords.pageX - startCoords.pageX);\r\n                if (distance < 0 &&\r\n                    distanceAbs > _this.settings.swipeThreshold) {\r\n                    _this.goToNextSlide(true);\r\n                    triggerClick = false;\r\n                }\r\n                else if (distance > 0 &&\r\n                    distanceAbs > _this.settings.swipeThreshold) {\r\n                    _this.goToPrevSlide(true);\r\n                    triggerClick = false;\r\n                }\r\n            }\r\n            else if (_this.swipeDirection === 'vertical') {\r\n                distance = Math.abs(endCoords.pageY - startCoords.pageY);\r\n                if (_this.settings.closable &&\r\n                    _this.settings.swipeToClose &&\r\n                    distance > 100) {\r\n                    _this.closeGallery();\r\n                    return;\r\n                }\r\n                else {\r\n                    _this.$backdrop.css('opacity', 1);\r\n                }\r\n            }\r\n            _this.outer.find('.lg-item').removeAttr('style');\r\n            if (triggerClick &&\r\n                Math.abs(endCoords.pageX - startCoords.pageX) < 5) {\r\n                // Trigger click if distance is less than 5 pix\r\n                var target = $LG(event.target);\r\n                if (_this.isPosterElement(target)) {\r\n                    _this.LGel.trigger(lGEvents.posterClick);\r\n                }\r\n            }\r\n            _this.swipeDirection = undefined;\r\n        });\r\n        // remove slide class once drag/swipe is completed if mode is not slide\r\n        setTimeout(function () {\r\n            if (!_this.outer.hasClass('lg-dragging') &&\r\n                _this.settings.mode !== 'lg-slide') {\r\n                _this.outer.removeClass('lg-slide');\r\n            }\r\n        }, this.settings.speed + 100);\r\n    };\r\n    LightGallery.prototype.enableSwipe = function () {\r\n        var _this = this;\r\n        var startCoords = {};\r\n        var endCoords = {};\r\n        var isMoved = false;\r\n        var isSwiping = false;\r\n        if (this.settings.enableSwipe) {\r\n            this.$inner.on('touchstart.lg', function (e) {\r\n                _this.dragOrSwipeEnabled = true;\r\n                var $item = _this.getSlideItem(_this.index);\r\n                if (($LG(e.target).hasClass('lg-item') ||\r\n                    $item.get().contains(e.target)) &&\r\n                    !_this.outer.hasClass('lg-zoomed') &&\r\n                    !_this.lgBusy &&\r\n                    e.touches.length === 1) {\r\n                    isSwiping = true;\r\n                    _this.touchAction = 'swipe';\r\n                    _this.manageSwipeClass();\r\n                    startCoords = {\r\n                        pageX: e.touches[0].pageX,\r\n                        pageY: e.touches[0].pageY,\r\n                    };\r\n                }\r\n            });\r\n            this.$inner.on('touchmove.lg', function (e) {\r\n                if (isSwiping &&\r\n                    _this.touchAction === 'swipe' &&\r\n                    e.touches.length === 1) {\r\n                    endCoords = {\r\n                        pageX: e.touches[0].pageX,\r\n                        pageY: e.touches[0].pageY,\r\n                    };\r\n                    _this.touchMove(startCoords, endCoords, e);\r\n                    isMoved = true;\r\n                }\r\n            });\r\n            this.$inner.on('touchend.lg', function (event) {\r\n                if (_this.touchAction === 'swipe') {\r\n                    if (isMoved) {\r\n                        isMoved = false;\r\n                        _this.touchEnd(endCoords, startCoords, event);\r\n                    }\r\n                    else if (isSwiping) {\r\n                        var target = $LG(event.target);\r\n                        if (_this.isPosterElement(target)) {\r\n                            _this.LGel.trigger(lGEvents.posterClick);\r\n                        }\r\n                    }\r\n                    _this.touchAction = undefined;\r\n                    isSwiping = false;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    LightGallery.prototype.enableDrag = function () {\r\n        var _this = this;\r\n        var startCoords = {};\r\n        var endCoords = {};\r\n        var isDraging = false;\r\n        var isMoved = false;\r\n        if (this.settings.enableDrag) {\r\n            this.outer.on('mousedown.lg', function (e) {\r\n                _this.dragOrSwipeEnabled = true;\r\n                var $item = _this.getSlideItem(_this.index);\r\n                if ($LG(e.target).hasClass('lg-item') ||\r\n                    $item.get().contains(e.target)) {\r\n                    if (!_this.outer.hasClass('lg-zoomed') && !_this.lgBusy) {\r\n                        e.preventDefault();\r\n                        if (!_this.lgBusy) {\r\n                            _this.manageSwipeClass();\r\n                            startCoords = {\r\n                                pageX: e.pageX,\r\n                                pageY: e.pageY,\r\n                            };\r\n                            isDraging = true;\r\n                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\r\n                            _this.outer.get().scrollLeft += 1;\r\n                            _this.outer.get().scrollLeft -= 1;\r\n                            // *\r\n                            _this.outer\r\n                                .removeClass('lg-grab')\r\n                                .addClass('lg-grabbing');\r\n                            _this.LGel.trigger(lGEvents.dragStart);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            $LG(window).on(\"mousemove.lg.global\" + this.lgId, function (e) {\r\n                if (isDraging && _this.lgOpened) {\r\n                    isMoved = true;\r\n                    endCoords = {\r\n                        pageX: e.pageX,\r\n                        pageY: e.pageY,\r\n                    };\r\n                    _this.touchMove(startCoords, endCoords);\r\n                    _this.LGel.trigger(lGEvents.dragMove);\r\n                }\r\n            });\r\n            $LG(window).on(\"mouseup.lg.global\" + this.lgId, function (event) {\r\n                if (!_this.lgOpened) {\r\n                    return;\r\n                }\r\n                var target = $LG(event.target);\r\n                if (isMoved) {\r\n                    isMoved = false;\r\n                    _this.touchEnd(endCoords, startCoords, event);\r\n                    _this.LGel.trigger(lGEvents.dragEnd);\r\n                }\r\n                else if (_this.isPosterElement(target)) {\r\n                    _this.LGel.trigger(lGEvents.posterClick);\r\n                }\r\n                // Prevent execution on click\r\n                if (isDraging) {\r\n                    isDraging = false;\r\n                    _this.outer.removeClass('lg-grabbing').addClass('lg-grab');\r\n                }\r\n            });\r\n        }\r\n    };\r\n    LightGallery.prototype.triggerPosterClick = function () {\r\n        var _this = this;\r\n        this.$inner.on('click.lg', function (event) {\r\n            if (!_this.dragOrSwipeEnabled &&\r\n                _this.isPosterElement($LG(event.target))) {\r\n                _this.LGel.trigger(lGEvents.posterClick);\r\n            }\r\n        });\r\n    };\r\n    LightGallery.prototype.manageSwipeClass = function () {\r\n        var _touchNext = this.index + 1;\r\n        var _touchPrev = this.index - 1;\r\n        if (this.settings.loop && this.galleryItems.length > 2) {\r\n            if (this.index === 0) {\r\n                _touchPrev = this.galleryItems.length - 1;\r\n            }\r\n            else if (this.index === this.galleryItems.length - 1) {\r\n                _touchNext = 0;\r\n            }\r\n        }\r\n        this.outer.find('.lg-item').removeClass('lg-next-slide lg-prev-slide');\r\n        if (_touchPrev > -1) {\r\n            this.getSlideItem(_touchPrev).addClass('lg-prev-slide');\r\n        }\r\n        this.getSlideItem(_touchNext).addClass('lg-next-slide');\r\n    };\r\n    /**\r\n     * Go to next slide\r\n     * @param {Boolean} fromTouch - true if slide function called via touch event\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  plugin.goToNextSlide();\r\n     * @see <a href=\"/demos/methods/\">Demo</a>\r\n     */\r\n    LightGallery.prototype.goToNextSlide = function (fromTouch) {\r\n        var _this = this;\r\n        var _loop = this.settings.loop;\r\n        if (fromTouch && this.galleryItems.length < 3) {\r\n            _loop = false;\r\n        }\r\n        if (!this.lgBusy) {\r\n            if (this.index + 1 < this.galleryItems.length) {\r\n                this.index++;\r\n                this.LGel.trigger(lGEvents.beforeNextSlide, {\r\n                    index: this.index,\r\n                });\r\n                this.slide(this.index, !!fromTouch, false, 'next');\r\n            }\r\n            else {\r\n                if (_loop) {\r\n                    this.index = 0;\r\n                    this.LGel.trigger(lGEvents.beforeNextSlide, {\r\n                        index: this.index,\r\n                    });\r\n                    this.slide(this.index, !!fromTouch, false, 'next');\r\n                }\r\n                else if (this.settings.slideEndAnimation && !fromTouch) {\r\n                    this.outer.addClass('lg-right-end');\r\n                    setTimeout(function () {\r\n                        _this.outer.removeClass('lg-right-end');\r\n                    }, 400);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Go to previous slides\r\n     * @param {Boolean} fromTouch - true if slide function called via touch event\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery({});\r\n     *  plugin.goToPrevSlide();\r\n     * @see <a href=\"/demos/methods/\">Demo</a>\r\n     *\r\n     */\r\n    LightGallery.prototype.goToPrevSlide = function (fromTouch) {\r\n        var _this = this;\r\n        var _loop = this.settings.loop;\r\n        if (fromTouch && this.galleryItems.length < 3) {\r\n            _loop = false;\r\n        }\r\n        if (!this.lgBusy) {\r\n            if (this.index > 0) {\r\n                this.index--;\r\n                this.LGel.trigger(lGEvents.beforePrevSlide, {\r\n                    index: this.index,\r\n                    fromTouch: fromTouch,\r\n                });\r\n                this.slide(this.index, !!fromTouch, false, 'prev');\r\n            }\r\n            else {\r\n                if (_loop) {\r\n                    this.index = this.galleryItems.length - 1;\r\n                    this.LGel.trigger(lGEvents.beforePrevSlide, {\r\n                        index: this.index,\r\n                        fromTouch: fromTouch,\r\n                    });\r\n                    this.slide(this.index, !!fromTouch, false, 'prev');\r\n                }\r\n                else if (this.settings.slideEndAnimation && !fromTouch) {\r\n                    this.outer.addClass('lg-left-end');\r\n                    setTimeout(function () {\r\n                        _this.outer.removeClass('lg-left-end');\r\n                    }, 400);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    LightGallery.prototype.keyPress = function () {\r\n        var _this = this;\r\n        $LG(window).on(\"keydown.lg.global\" + this.lgId, function (e) {\r\n            if (_this.lgOpened &&\r\n                _this.settings.escKey === true &&\r\n                e.keyCode === 27) {\r\n                e.preventDefault();\r\n                if (_this.settings.allowMediaOverlap &&\r\n                    _this.outer.hasClass('lg-can-toggle') &&\r\n                    _this.outer.hasClass('lg-components-open')) {\r\n                    _this.outer.removeClass('lg-components-open');\r\n                }\r\n                else {\r\n                    _this.closeGallery();\r\n                }\r\n            }\r\n            if (_this.lgOpened && _this.galleryItems.length > 1) {\r\n                if (e.keyCode === 37) {\r\n                    e.preventDefault();\r\n                    _this.goToPrevSlide();\r\n                }\r\n                if (e.keyCode === 39) {\r\n                    e.preventDefault();\r\n                    _this.goToNextSlide();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    LightGallery.prototype.arrow = function () {\r\n        var _this = this;\r\n        this.getElementById('lg-prev').on('click.lg', function () {\r\n            _this.goToPrevSlide();\r\n        });\r\n        this.getElementById('lg-next').on('click.lg', function () {\r\n            _this.goToNextSlide();\r\n        });\r\n    };\r\n    LightGallery.prototype.arrowDisable = function (index) {\r\n        // Disable arrows if settings.hideControlOnEnd is true\r\n        if (!this.settings.loop && this.settings.hideControlOnEnd) {\r\n            var $prev = this.getElementById('lg-prev');\r\n            var $next = this.getElementById('lg-next');\r\n            if (index + 1 === this.galleryItems.length) {\r\n                $next.attr('disabled', 'disabled').addClass('disabled');\r\n            }\r\n            else {\r\n                $next.removeAttr('disabled').removeClass('disabled');\r\n            }\r\n            if (index === 0) {\r\n                $prev.attr('disabled', 'disabled').addClass('disabled');\r\n            }\r\n            else {\r\n                $prev.removeAttr('disabled').removeClass('disabled');\r\n            }\r\n        }\r\n    };\r\n    LightGallery.prototype.setTranslate = function ($el, xValue, yValue, scaleX, scaleY) {\r\n        if (scaleX === void 0) { scaleX = 1; }\r\n        if (scaleY === void 0) { scaleY = 1; }\r\n        $el.css('transform', 'translate3d(' +\r\n            xValue +\r\n            'px, ' +\r\n            yValue +\r\n            'px, 0px) scale3d(' +\r\n            scaleX +\r\n            ', ' +\r\n            scaleY +\r\n            ', 1)');\r\n    };\r\n    LightGallery.prototype.mousewheel = function () {\r\n        var _this = this;\r\n        var lastCall = 0;\r\n        this.outer.on('wheel.lg', function (e) {\r\n            if (!e.deltaY || _this.galleryItems.length < 2) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            var now = new Date().getTime();\r\n            if (now - lastCall < 1000) {\r\n                return;\r\n            }\r\n            lastCall = now;\r\n            if (e.deltaY > 0) {\r\n                _this.goToNextSlide();\r\n            }\r\n            else if (e.deltaY < 0) {\r\n                _this.goToPrevSlide();\r\n            }\r\n        });\r\n    };\r\n    LightGallery.prototype.isSlideElement = function (target) {\r\n        return (target.hasClass('lg-outer') ||\r\n            target.hasClass('lg-item') ||\r\n            target.hasClass('lg-img-wrap') ||\r\n            target.hasClass('lg-img-rotate'));\r\n    };\r\n    LightGallery.prototype.isPosterElement = function (target) {\r\n        var playButton = this.getSlideItem(this.index)\r\n            .find('.lg-video-play-button')\r\n            .get();\r\n        return (target.hasClass('lg-video-poster') ||\r\n            target.hasClass('lg-video-play-button') ||\r\n            (playButton && playButton.contains(target.get())));\r\n    };\r\n    /**\r\n     * Maximize minimize inline gallery.\r\n     * @category lGPublicMethods\r\n     */\r\n    LightGallery.prototype.toggleMaximize = function () {\r\n        var _this = this;\r\n        this.getElementById('lg-maximize').on('click.lg', function () {\r\n            _this.$container.toggleClass('lg-inline');\r\n            _this.refreshOnResize();\r\n        });\r\n    };\r\n    LightGallery.prototype.invalidateItems = function () {\r\n        for (var index = 0; index < this.items.length; index++) {\r\n            var element = this.items[index];\r\n            var $element = $LG(element);\r\n            $element.off(\"click.lgcustom-item-\" + $element.attr('data-lg-id'));\r\n        }\r\n    };\r\n    LightGallery.prototype.trapFocus = function () {\r\n        var _this = this;\r\n        this.$container.get().focus({\r\n            preventScroll: true,\r\n        });\r\n        $LG(window).on(\"keydown.lg.global\" + this.lgId, function (e) {\r\n            if (!_this.lgOpened) {\r\n                return;\r\n            }\r\n            var isTabPressed = e.key === 'Tab' || e.keyCode === 9;\r\n            if (!isTabPressed) {\r\n                return;\r\n            }\r\n            var focusableEls = utils.getFocusableElements(_this.$container.get());\r\n            var firstFocusableEl = focusableEls[0];\r\n            var lastFocusableEl = focusableEls[focusableEls.length - 1];\r\n            if (e.shiftKey) {\r\n                if (document.activeElement === firstFocusableEl) {\r\n                    lastFocusableEl.focus();\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n            else {\r\n                if (document.activeElement === lastFocusableEl) {\r\n                    firstFocusableEl.focus();\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    LightGallery.prototype.manageCloseGallery = function () {\r\n        var _this = this;\r\n        if (!this.settings.closable)\r\n            return;\r\n        var mousedown = false;\r\n        this.getElementById('lg-close').on('click.lg', function () {\r\n            _this.closeGallery();\r\n        });\r\n        if (this.settings.closeOnTap) {\r\n            // If you drag the slide and release outside gallery gets close on chrome\r\n            // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer\r\n            this.outer.on('mousedown.lg', function (e) {\r\n                var target = $LG(e.target);\r\n                if (_this.isSlideElement(target)) {\r\n                    mousedown = true;\r\n                }\r\n                else {\r\n                    mousedown = false;\r\n                }\r\n            });\r\n            this.outer.on('mousemove.lg', function () {\r\n                mousedown = false;\r\n            });\r\n            this.outer.on('mouseup.lg', function (e) {\r\n                var target = $LG(e.target);\r\n                if (_this.isSlideElement(target) && mousedown) {\r\n                    if (!_this.outer.hasClass('lg-dragging')) {\r\n                        _this.closeGallery();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Close lightGallery if it is opened.\r\n     *\r\n     * @description If closable is false in the settings, you need to pass true via closeGallery method to force close gallery\r\n     * @return returns the estimated time to close gallery completely including the close animation duration\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  plugin.closeGallery();\r\n     *\r\n     */\r\n    LightGallery.prototype.closeGallery = function (force) {\r\n        var _this = this;\r\n        if (!this.lgOpened || (!this.settings.closable && !force)) {\r\n            return 0;\r\n        }\r\n        this.LGel.trigger(lGEvents.beforeClose);\r\n        if (this.settings.resetScrollPosition && !this.settings.hideScrollbar) {\r\n            $LG(window).scrollTop(this.prevScrollTop);\r\n        }\r\n        var currentItem = this.items[this.index];\r\n        var transform;\r\n        if (this.zoomFromOrigin && currentItem) {\r\n            var _a = this.mediaContainerPosition, top_4 = _a.top, bottom = _a.bottom;\r\n            var _b = this.galleryItems[this.index], __slideVideoInfo = _b.__slideVideoInfo, poster = _b.poster;\r\n            var imageSize = utils.getSize(currentItem, this.outer, top_4 + bottom, __slideVideoInfo && poster && this.settings.videoMaxSize);\r\n            transform = utils.getTransform(currentItem, this.outer, top_4, bottom, imageSize);\r\n        }\r\n        if (this.zoomFromOrigin && transform) {\r\n            this.outer.addClass('lg-closing lg-zoom-from-image');\r\n            this.getSlideItem(this.index)\r\n                .addClass('lg-start-end-progress')\r\n                .css('transition-duration', this.settings.startAnimationDuration + 'ms')\r\n                .css('transform', transform);\r\n        }\r\n        else {\r\n            this.outer.addClass('lg-hide-items');\r\n            // lg-zoom-from-image is used for setting the opacity to 1 if zoomFromOrigin is true\r\n            // If the closing item doesn't have the lg-size attribute, remove this class to avoid the closing css conflicts\r\n            this.outer.removeClass('lg-zoom-from-image');\r\n        }\r\n        // Unbind all events added by lightGallery\r\n        // @todo\r\n        //this.$el.off('.lg.tm');\r\n        this.destroyModules();\r\n        this.lGalleryOn = false;\r\n        this.isDummyImageRemoved = false;\r\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\r\n        clearTimeout(this.hideBarTimeout);\r\n        this.hideBarTimeout = false;\r\n        $LG('html').removeClass('lg-on');\r\n        this.outer.removeClass('lg-visible lg-components-open');\r\n        // Resetting opacity to 0 isd required as  vertical swipe to close function adds inline opacity.\r\n        this.$backdrop.removeClass('in').css('opacity', 0);\r\n        var removeTimeout = this.zoomFromOrigin && transform\r\n            ? Math.max(this.settings.startAnimationDuration, this.settings.backdropDuration)\r\n            : this.settings.backdropDuration;\r\n        this.$container.removeClass('lg-show-in');\r\n        // Once the closign animation is completed and gallery is invisible\r\n        setTimeout(function () {\r\n            if (_this.zoomFromOrigin && transform) {\r\n                _this.outer.removeClass('lg-zoom-from-image');\r\n            }\r\n            _this.$container.removeClass('lg-show');\r\n            // Reset scrollbar\r\n            _this.resetScrollBar();\r\n            // Need to remove inline opacity as it is used in the stylesheet as well\r\n            _this.$backdrop\r\n                .removeAttr('style')\r\n                .css('transition-duration', _this.settings.backdropDuration + 'ms');\r\n            _this.outer.removeClass(\"lg-closing \" + _this.settings.startClass);\r\n            _this.getSlideItem(_this.index).removeClass('lg-start-end-progress');\r\n            _this.$inner.empty();\r\n            if (_this.lgOpened) {\r\n                _this.LGel.trigger(lGEvents.afterClose, {\r\n                    instance: _this,\r\n                });\r\n            }\r\n            if (_this.$container.get()) {\r\n                _this.$container.get().blur();\r\n            }\r\n            _this.lgOpened = false;\r\n        }, removeTimeout + 100);\r\n        return removeTimeout + 100;\r\n    };\r\n    LightGallery.prototype.initModules = function () {\r\n        this.plugins.forEach(function (module) {\r\n            try {\r\n                module.init();\r\n            }\r\n            catch (err) {\r\n                console.warn(\"lightGallery:- make sure lightGallery module is properly initiated\");\r\n            }\r\n        });\r\n    };\r\n    LightGallery.prototype.destroyModules = function (destroy) {\r\n        this.plugins.forEach(function (module) {\r\n            try {\r\n                if (destroy) {\r\n                    module.destroy();\r\n                }\r\n                else {\r\n                    module.closeGallery && module.closeGallery();\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.warn(\"lightGallery:- make sure lightGallery module is properly destroyed\");\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Refresh lightGallery with new set of children.\r\n     *\r\n     * @description This is useful to update the gallery when the child elements are changed without calling destroy method.\r\n     *\r\n     * If you are using dynamic mode, you can pass the modified array of dynamicEl as the first parameter to refresh the dynamic gallery\r\n     * @see <a href=\"/demos/dynamic-mode/\">Demo</a>\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  // Delete or add children, then call\r\n     *  plugin.refresh();\r\n     *\r\n     */\r\n    LightGallery.prototype.refresh = function (galleryItems) {\r\n        if (!this.settings.dynamic) {\r\n            this.invalidateItems();\r\n        }\r\n        if (galleryItems) {\r\n            this.galleryItems = galleryItems;\r\n        }\r\n        else {\r\n            this.galleryItems = this.getItems();\r\n        }\r\n        this.updateControls();\r\n        this.openGalleryOnItemClick();\r\n        this.LGel.trigger(lGEvents.updateSlides);\r\n    };\r\n    LightGallery.prototype.updateControls = function () {\r\n        this.addSlideVideoInfo(this.galleryItems);\r\n        this.updateCounterTotal();\r\n        this.manageSingleSlideClassName();\r\n    };\r\n    LightGallery.prototype.destroyGallery = function () {\r\n        this.destroyModules(true);\r\n        if (!this.settings.dynamic) {\r\n            this.invalidateItems();\r\n        }\r\n        $LG(window).off(\".lg.global\" + this.lgId);\r\n        this.LGel.off('.lg');\r\n        this.$container.remove();\r\n    };\r\n    /**\r\n     * Destroy lightGallery.\r\n     * Destroy lightGallery and its plugin instances completely\r\n     *\r\n     * @description This method also calls CloseGallery function internally. Returns the time takes to completely close and destroy the instance.\r\n     * In case if you want to re-initialize lightGallery right after destroying it, initialize it only once the destroy process is completed.\r\n     * You can use refresh method most of the times.\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  plugin.destroy();\r\n     *\r\n     */\r\n    LightGallery.prototype.destroy = function () {\r\n        var closeTimeout = this.closeGallery(true);\r\n        if (closeTimeout) {\r\n            setTimeout(this.destroyGallery.bind(this), closeTimeout);\r\n        }\r\n        else {\r\n            this.destroyGallery();\r\n        }\r\n        return closeTimeout;\r\n    };\r\n    return LightGallery;\r\n}());\n\nfunction lightGallery(el, options) {\r\n    return new LightGallery(el, options);\r\n}\n\nvar LgMethods = {\r\n    onAfterAppendSlide: 'lgAfterAppendSlide',\r\n    onInit: 'lgInit',\r\n    onHasVideo: 'lgHasVideo',\r\n    onContainerResize: 'lgContainerResize',\r\n    onUpdateSlides: 'lgUpdateSlides',\r\n    onAfterAppendSubHtml: 'lgAfterAppendSubHtml',\r\n    onBeforeOpen: 'lgBeforeOpen',\r\n    onAfterOpen: 'lgAfterOpen',\r\n    onSlideItemLoad: 'lgSlideItemLoad',\r\n    onBeforeSlide: 'lgBeforeSlide',\r\n    onAfterSlide: 'lgAfterSlide',\r\n    onPosterClick: 'lgPosterClick',\r\n    onDragStart: 'lgDragStart',\r\n    onDragMove: 'lgDragMove',\r\n    onDragEnd: 'lgDragEnd',\r\n    onBeforeNextSlide: 'lgBeforeNextSlide',\r\n    onBeforePrevSlide: 'lgBeforePrevSlide',\r\n    onBeforeClose: 'lgBeforeClose',\r\n    onAfterClose: 'lgAfterClose',\r\n    onRotateLeft: 'lgRotateLeft',\r\n    onRotateRight: 'lgRotateRight',\r\n    onFlipHorizontal: 'lgFlipHorizontal',\r\n    onFlipVertical: 'lgFlipVertical',\r\n};\r\nvar LG = function (_a) {\r\n    var children = _a.children, elementClassNames = _a.elementClassNames, onAfterAppendSlide = _a.onAfterAppendSlide, onInit = _a.onInit, onHasVideo = _a.onHasVideo, onContainerResize = _a.onContainerResize, onAfterAppendSubHtml = _a.onAfterAppendSubHtml, onBeforeOpen = _a.onBeforeOpen, onAfterOpen = _a.onAfterOpen, onSlideItemLoad = _a.onSlideItemLoad, onBeforeSlide = _a.onBeforeSlide, onAfterSlide = _a.onAfterSlide, onPosterClick = _a.onPosterClick, onDragStart = _a.onDragStart, onDragMove = _a.onDragMove, onDragEnd = _a.onDragEnd, onBeforeNextSlide = _a.onBeforeNextSlide, onBeforePrevSlide = _a.onBeforePrevSlide, onBeforeClose = _a.onBeforeClose, onAfterClose = _a.onAfterClose, onRotateLeft = _a.onRotateLeft, onRotateRight = _a.onRotateRight, onFlipHorizontal = _a.onFlipHorizontal, onFlipVertical = _a.onFlipVertical, restProps = __rest(_a, [\"children\", \"elementClassNames\", \"onAfterAppendSlide\", \"onInit\", \"onHasVideo\", \"onContainerResize\", \"onAfterAppendSubHtml\", \"onBeforeOpen\", \"onAfterOpen\", \"onSlideItemLoad\", \"onBeforeSlide\", \"onAfterSlide\", \"onPosterClick\", \"onDragStart\", \"onDragMove\", \"onDragEnd\", \"onBeforeNextSlide\", \"onBeforePrevSlide\", \"onBeforeClose\", \"onAfterClose\", \"onRotateLeft\", \"onRotateRight\", \"onFlipHorizontal\", \"onFlipVertical\"]);\r\n    var $lg = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\r\n    var registerEvents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\r\n        if (onAfterAppendSlide && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onAfterAppendSlide, (function (event) {\r\n                onAfterAppendSlide(event.detail);\r\n            }));\r\n        }\r\n        if (onInit && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onInit, (function (event) {\r\n                onInit(event.detail);\r\n            }));\r\n        }\r\n        if (onHasVideo && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onHasVideo, (function (event) {\r\n                onHasVideo(event.detail);\r\n            }));\r\n        }\r\n        if (onContainerResize && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onContainerResize, (function (event) {\r\n                onContainerResize(event.detail);\r\n            }));\r\n        }\r\n        if (onAfterAppendSubHtml && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onAfterAppendSubHtml, (function (event) {\r\n                onAfterAppendSubHtml(event.detail);\r\n            }));\r\n        }\r\n        if (onBeforeOpen && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onBeforeOpen, (function (event) {\r\n                onBeforeOpen(event.detail);\r\n            }));\r\n        }\r\n        if (onAfterOpen && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onAfterOpen, (function (event) {\r\n                onAfterOpen(event.detail);\r\n            }));\r\n        }\r\n        if (onSlideItemLoad && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onSlideItemLoad, (function (event) {\r\n                onSlideItemLoad(event.detail);\r\n            }));\r\n        }\r\n        if (onBeforeSlide && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onBeforeSlide, (function (event) {\r\n                onBeforeSlide(event.detail);\r\n            }));\r\n        }\r\n        if (onAfterSlide && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onAfterSlide, (function (event) {\r\n                onAfterSlide(event.detail);\r\n            }));\r\n        }\r\n        if (onPosterClick && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onPosterClick, (function (event) {\r\n                onPosterClick(event.detail);\r\n            }));\r\n        }\r\n        if (onDragStart && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onDragStart, (function (event) {\r\n                onDragStart(event.detail);\r\n            }));\r\n        }\r\n        if (onDragMove && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onDragMove, (function (event) {\r\n                onDragMove(event.detail);\r\n            }));\r\n        }\r\n        if (onDragEnd && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onDragEnd, (function (event) {\r\n                onDragEnd(event.detail);\r\n            }));\r\n        }\r\n        if (onBeforeNextSlide && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onBeforeNextSlide, (function (event) {\r\n                onBeforeNextSlide(event.detail);\r\n            }));\r\n        }\r\n        if (onBeforePrevSlide && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onBeforePrevSlide, (function (event) {\r\n                onBeforePrevSlide(event.detail);\r\n            }));\r\n        }\r\n        if (onBeforeClose && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onBeforeClose, (function (event) {\r\n                onBeforeClose(event.detail);\r\n            }));\r\n        }\r\n        if (onAfterClose && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onAfterClose, (function (event) {\r\n                onAfterClose(event.detail);\r\n            }));\r\n        }\r\n        if (onRotateLeft && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onRotateLeft, (function (event) {\r\n                onRotateLeft(event.detail);\r\n            }));\r\n        }\r\n        if (onRotateRight && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onRotateRight, (function (event) {\r\n                onRotateRight(event.detail);\r\n            }));\r\n        }\r\n        if (onFlipHorizontal && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onFlipHorizontal, (function (event) {\r\n                onFlipHorizontal(event.detail);\r\n            }));\r\n        }\r\n        if (onFlipVertical && $lg && $lg.current) {\r\n            $lg.current.addEventListener(LgMethods.onFlipVertical, (function (event) {\r\n                onFlipVertical(event.detail);\r\n            }));\r\n        }\r\n    }, [\r\n        onAfterAppendSlide,\r\n        onAfterAppendSubHtml,\r\n        onAfterClose,\r\n        onRotateLeft,\r\n        onRotateRight,\r\n        onFlipHorizontal,\r\n        onFlipVertical,\r\n        onAfterOpen,\r\n        onAfterSlide,\r\n        onBeforeClose,\r\n        onBeforeNextSlide,\r\n        onBeforeOpen,\r\n        onBeforePrevSlide,\r\n        onBeforeSlide,\r\n        onContainerResize,\r\n        onDragEnd,\r\n        onDragMove,\r\n        onDragStart,\r\n        onHasVideo,\r\n        onInit,\r\n        onPosterClick,\r\n        onSlideItemLoad,\r\n    ]);\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\r\n        registerEvents();\r\n        var lightGallery$1 = lightGallery($lg.current, restProps);\r\n        return function cleanup() {\r\n            lightGallery$1.destroy();\r\n        };\r\n    }, [registerEvents, restProps]);\r\n    return ((0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", { className: \"lg-react-element \" + (elementClassNames ? elementClassNames : ''), ref: $lg }, children));\r\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LG);\n//# sourceMappingURL=Lightgallery.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/react/Lightgallery.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/css/lg-thumbnail.css":
/*!********************************************************!*\
  !*** ./node_modules/lightgallery/css/lg-thumbnail.css ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6e4f889dda1c\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9sZy10aHVtYm5haWwuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtYXIvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9sZy10aHVtYm5haWwuY3NzPzllYzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI2ZTRmODg5ZGRhMWNcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/css/lg-thumbnail.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/css/lg-zoom.css":
/*!***************************************************!*\
  !*** ./node_modules/lightgallery/css/lg-zoom.css ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6d9ae9c2edaa\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9sZy16b29tLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbWFyLy4vbm9kZV9tb2R1bGVzL2xpZ2h0Z2FsbGVyeS9jc3MvbGctem9vbS5jc3M/ZWVhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjZkOWFlOWMyZWRhYVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/css/lg-zoom.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/css/lightgallery.css":
/*!********************************************************!*\
  !*** ./node_modules/lightgallery/css/lightgallery.css ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"cf55105e3b52\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9saWdodGdhbGxlcnkuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtYXIvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9saWdodGdhbGxlcnkuY3NzPzNiYzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJjZjU1MTA1ZTNiNTJcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/css/lightgallery.css\n");

/***/ })

};
;